<h1>CSS Inline Layout Module Level 3</h1>

<style media="print" type="text/css">
    img#edge { width: 80%; height: 70%;}
    dt.label { display: run-in; }
</style>

<pre class='metadata'>
Shortname: css-inline
Level: 3
Status: ED
Group: csswg
TR: http://www.w3.org/TR/css-inline/
ED: http://dev.w3.org/csswg/css-inline/
Previous version: http://www.w3.org/TR/2002/WD-css3-linebox-20020515/
!Issues list: <a href="https://www.w3.org/Bugs/Public/buglist.cgi?query_format=advanced&product=CSS&component=Linebox&bug_status=NEW&bug_status=ASSIGNED&bug_status=REOPENED">CSS3 Line Layout issues in Bugzilla</a>
Editor: Dave Cramer, Hachette Livre, dauwhe@gmail.com
Editor: Elika J. Etemad, Invited Expert, http://fantasai.inkedblade.net/contact
Editor: Steve Zilles, Adobe, szilles@adobe.com
Abstract: The CSS formatting model provides for a flow of elements and text inside of a container to be wrapped into lines.  The formatting of elements and text within a line, its positioning in the inline progression direction, and the breaking of lines are described in [[CSS3TEXT]].  This module describes the positioning in the block progression direction both of elements and text within lines and of the lines themselves.  This positioning is often relative to a baseline.  It also describes special features for formatting of first lines and drop caps.  It extends on the model in [[CSS2]].
Ignored Terms: guru, ji, line-height-shift-adjustment, text-script, after, before
Link Defaults: css-fonts-3 (property) font-family
</pre>



<h2 id="line-height">Line Heights and Baseline Alignment</h2>

<p class="issue">This section is being rewritten. Refer to <a href="http://www.w3.org/TR/CSS21/visudet.html#line-height">section 10.8</a> of [[CSS21]] for the normative CSS definition or the <a href="http://www.w3.org/TR/2002/WD-css3-linebox-20020515/">2002 Working Draft</a> if you want pretty pictures. (But ignore the old text, half of it's wrong. We're not specifying which half, that's to be determined.)</p>

<h3 id="dominant-baseline property">
Dominant Baselines: the 'dominant-baseline' property</h3>

	<pre class="propdef">
	Name: dominant-baseline
	Value: auto | text-bottom | alphabetic | central | mathematical | hanging | text-top
	Initial: normal
	Applies to: block containers and inline boxes
	Inherited: yes
	Percentages: N/A
	Media: visual
	Computed value: as specified
	</pre>

	This property specifies the <dfn>dominant baseline</dfn>,
	which is the baseline used to align the box's text and inline-level contents.
	Values have the following meanings:

	<dl dfn-for=dominant-baseline dfn-type=value>
		<dt><dfn>auto</dfn>
		<dd>
			Equivalent to ''dominant-baseline/alphabetic'' in <i>horizontal writing modes</i>
			and in <i>vertical writing modes</i>
			when 'text-orientation' is ''sideways'', ''sideways-right'', or ''sideways-left''.
			equivalent to ''dominant-baseline/central'' in <i>vertical writing modes</i>
			when 'text-orientation' is ''mixed'' or ''upright''.

		<dt><dfn>text-bottom</dfn>
		<dd>
			Use the bottom of the em box as the baseline.

		<dt><dfn>alphabetic</dfn>
		<dd>
			Use the alphabetic baseline.

		<dt><dfn>central</dfn>
		<dd>
			Use the central baseline
			(halfway between the ascent and descent).

		<dt><dfn>mathematical</dfn>
		<dd>
			Use the mathematical baseline.

		<dt><dfn>hanging</dfn>
		<dd>
			Use the hanging baseline.

		<dt><dfn>text-top</dfn>
		<dd>
			Use the top of the em box as the baseline.
	</dl>

	See [[CSS3-WRITING-MODES]] for an introduction to dominant baselines.

	Issue: Should be text-over and text-under instead of text-top and text-bottom,
	but maybe it's better not to use those terms for consistency with legacy 'vertical-align'.

<h3 id="transverse-alignment">
Transverse Box Alignment: the 'vertical-align' property</h3>

	<pre class="propdef">
	Name: vertical-align
	Value: <<'baseline-shift'>> || <<'alignment-baseline'>>
	Initial: baseline
	Applies to: inline-level boxes
	Inherited: no
	Percentages: N/A
	Media: visual
	Computed value: as specified
	</pre>

	<p>This shorthand property specifies how an inline-level box is aligned within the line.
	Values are the same as for its longhand properties, see below.

	<p class="advisement">
		Authors should use this property ('vertical-align') instead of its longhands.

<h4 id="alignment-baseline-property">
Alignment Point: 'alignment-baseline' longhand</h4>

	<pre class="propdef">
	Name: alignment-baseline
	Value: baseline | text-bottom | alphabetic | middle | central | mathematical | text-top | bottom | center | top
	Initial: baseline
	Applies to: inline-level boxes
	Inherited: no
	Percentages: N/A
	Media: visual
	Computed value: as specified
	</pre>

	<p>Specifies what point of an inline-level box is aligned to what point in the parent.
	Values are defined below:

	For the following definitions, the margin box is used for atomic inlines,
	and the leading box for non-replaced inlines:

	<dl dfn-for=alignment-baseline dfn-type=value>
		<dt><dfn>baseline</dfn>
		<dd>
			Use the <i>dominant baseline</i> choice of the parent.
			Match the box's corresponding baseline to that of its parent.

		<dt><dfn>text-bottom</dfn>
		<dd>
			Match the bottom of the box to the bottom of the parent's content area.

		<dt><dfn>alphabetic</dfn>
		<dd>
			Match the box's alphabetic baseline to that of its parent.

		<dt><dfn>middle</dfn>
		<dd>
			Align the vertical midpoint of the box with
			the baseline of the parent box plus half the x-height of the parent.

		<dt><dfn>central</dfn>
		<dd>
			Match the box's central baseline to the central baseline of its parent.

		<dt><dfn>mathematical</dfn>
		<dd>
			Match the box's mathematical baseline to that of its parent.

		<dt><dfn>text-top</dfn>
		<dd>
			Match the top of the box to the top of the parent's content area.
	</dl>

	For the following definitions, the <i>alignment subtree</i>
	is as defined in [[!CSS21]].

	<dl dfn-for=alignment-baseline dfn-type=value>
		<dt><dfn>top</dfn>
		<dd>
			Align the top of the aligned subtree with the top of the line box.

		<dt><dfn>center</dfn>
		<dd>
			Align the center of the aligned subtree with the center of the line box.

		<dt><dfn>bottom</dfn>
		<dd>
			Align the bottom of the aligned subtree with the bottom of the line box.
	</dl>

	Issue: Putting ''alignment-baseline/top'', ''alignment-baseline/center'', and ''alignment-baseline/bottom'' in here is awkward,
	because they're not really baselines. :/

	SVG implementations <em>may</em> support the following aliases
	in order to support legacy content:
	<pre dfn-for=alignment-baseline dfn-type=value>
		<dfn>before-edge</dfn> | <dfn>text-before-edge</dfn> = ''alignment-baseline/text-top''
		<dfn>after-edge</dfn> | <dfn>text-after-edge</dfn> = ''alignment-baseline/text-bottom''
	</pre>
	These values are not allowed in the 'vertical-align' shorthand.

<h4 id="baseline-shift-property">
Alignment Shift: 'baseline-shift' longhand</h4>

	<pre class="propdef">
	Name: baseline-shift
	Value: <<length>> | <<percentage>> | sub | super
	Initial: 0
	Applies to: inline-level boxes
	Inherited: no
	Percentages: refer to the used value of 'line-height'
	Media: visual
	Computed value: absolute length, percentage, or keyword specified
	</pre>

	<p>This property specifies by how much the box is shifted up
	from its alignment point.
	It does not apply when 'alignment-baseline' is ''alignment-baseline/top'' or ''alignment-baseline/bottom''.

	<p class="advisement">
		Authors should use the 'vertical-align' shorthand instead of this property.

	Values have the following meanings:

	<dl dfn-for="baseline-shift" dfn-type=value>
		<dt><dfn><<length>></dfn>
		<dd>Raise (positive value) or lower (negative value) by the specified length.

		<dt><dfn><<percentage>></dfn>
		<dd>Raise (positive value) or lower (negative value) by the specified percentage of the 'line-height'.

		<dt><dfn>sub</dfn>
		<dd>Lower by the offset appropriate for subscripts of the parent’s box.
		(The UA should use the parent’s font data to find this offset whenever possible.)

		<dt><dfn>super</dfn>
		<dd>Raise by the offset appropriate for superscripts of the parent’s box.
		(The UA should use the parent’s font data to find this offset whenever possible.)
	</dl>

	<p>User agents <em>may</em> additionally support the keyword <dfn for=baseline-shift type=value>baseline</dfn>
	as computing to ''0''
	if is necessary for them to support legacy SVG content.
	Issue: We would prefer to remove this, and are looking for feedback from SVG user agents as to whether it's necessary.

<h2 id="initial-letter-styling">
<!--<a name="Initial"></a>-->
Initial Letters</h2>

<p class="issue">The editors would appreciate any examples of drop initials in non-western scripts, especially Arabic and Indic scripts.</p>

<h3 id="initial-letter-intro">
<!--<a name="DropInitial"></a>-->
An Introduction to Initial Letters</h3>

Large, decorative letters have been used to start new sections of text since before the invention of printing. In fact, their use predates lowercase letters entirely.

<h4 id="drop-initial">
Drop Initial</h4>

A <dfn>dropped initial</dfn> (or “drop cap”) is a larger-than-usual letter at the start of a paragraph, with a baseline at least one line lower than the first baseline of the paragraph. The size of the drop initial is usually indicated by how many lines it occupies. Two- and three-line drop initials are very common.

<figure>
  <img alt="3-line drop cap with E Acute"  src="Dropcap-E-acute-3line.png" width="480">
  <p class="caption">Three-line drop initial with E acute. Since the cap-height of the drop initial aligns with the cap-height of the main text, the accent extends above the paragraph.</p>
</figure>

The exact size and position of a <a>dropped initial</a> depends on the alignment of its glyph. Reference points on the drop cap must align precisely with reference points in the text. In Western scripts, the top reference points are the cap height of the initial letter and of the first line of text. The bottom reference points are the alphabetic baseline of the initial letter and the baseline of the Nth line of text. <a href="#f2">Figure 2</a> shows a simple two-line drop cap, with the relevant reference lines marked.



<figure id="f2">
  <img src="Dropcap-lines.png" width="600" alt="drop cap showing alignment"/>
  <p class="caption">Two-line drop cap showing baselines (green lines), cap-height (red line), and ascender (cyan line).</p>
</figure>

The alignment constraints for drop initials depend on the writing system. In ideographic scripts, the initial letter extends from the <a>block-start</a> edge of the first line to the <a>block-end</a> edge of the Nth line.

<figure>
  <img src="Initial-2line-JapaneseVertical六.png" width="480" alt="Japanese Vertical Initial"/>
  <p class="caption">Two-line drop initial in vertical writing mode</p>
</figure>

<figure>
  <img src="CJK-Initial.001.png" width="480" alt="Diagram of Japanese initial letter in vertical writing mode"/>
  <p class="caption">Diagram of Japanese initial letter in vertical writing mode</p>
</figure>

Note: In some cases, the exclusion area for the drop initial is larger than its glyph in order to preserve inline-axis alignment. This effect is out-of-scope for this level. However, extra spacing can still be given using margins.

In some Indic scripts, the top alignment point
is the hanging baseline,
and the bottom alignment point is the text-after-edge.

<figure>
  <img src="Devangari-Initial.png" width="480" alt="Devangari initial letter"/>
  <p class="caption">Devangari <a>initial letter</a> aligned with hanging baseline. Alignment points shown in red.</p>
</figure>


<h4 id="sunk-initial">
Sunken Initial Letters</h4>

Some styles of drop initials do not align with the first line of text. A <dfn>sunken initial</dfn> (or “sunken cap”) both sinks below the first baseline, and extends above the first line of text.

<figure>
  <img src="SunkenCapA.png" width="480" alt="sunken drop initial"/>
  <p class="caption">Sunken cap. The letter drops two lines, but is the size of a three-line initial letter.</p>
</figure>

<h4 id="raise-initial">
Raised Initial Letters</h4>

A <dfn>raised initial</dfn> (often called a “raised cap” or “stick-up cap”) “sinks” to the first text baseline. Unlike simply increasing the font size, which affects the line spacing below it to make room for potential descenders, it does not sink below that.


<figure>
<img src="RaisedCap.png" width="480" alt="raised cap"/>
<p class="caption">Raised cap. The initial letter is the size of a 3-line initial, but does not drop.</p>
</figure>




<h3 id="selecting-drop-initials">Selecting Initial Letters</h3>

Initial letters are typically a single letter, which can be selected by the <code>::first-letter</code> pseudo-element, as defined in [[SELECT]].

<p>Authors who need more control over which characters are included in an initial letter, or who want to apply initial-letter formatting to replaced elements or multiple words can also apply the 'initial-letter' property to the first inline-level child of a block container.

<div class="example">
  <pre>
    &lt;p>This paragraph has a dropped “T”.
    &lt;p>&lt;img alt="H" src="illuminated-h.svg">ere we have an illuminated “H”.
    &lt;p>&lt;span>Words may also&lt;/span> be given initial letter styling at the beginning of a paragraph.
  </pre>

  <pre>
    ::first-letter, /* style first paragraph's T */
    img, /* style illuminated H */
    span /* drop Words may also */
    { initial-letter: 2; }
  </pre>
</div>

<h3 id="sizing-drop-initials">
Creating Initial Letters: the 'initial-letter' property</h3>

<pre class="propdef">
Name: <dfn id="propdef-initial-letter">initial-letter</dfn>
Value: normal | [<<number>> <<integer>>?]
Initial: normal
Applies to: <code>::first-letter</code> pseudo-elements and inline-level first child of a block container
Inherited: no
Percentages: N/A
Media: visual
Computed value: as specified
</pre>

This property specifies styling for dropped, raised, and sunken initial letters. It takes the following values:

<dl dfn-for=initial-letter dfn-type=value>
  <dt><dfn>normal</dfn>
  <dd>No special initial-letter effect. Text behaves as normal.
  <dt><dfn><<number>></dfn>
  <dd>This first argument defines the size of the initial letter, in terms of how many lines it occupies. Negative values are not allowed.
  <dt><dfn><<integer>></dfn>
  <dd>This optional second argument argument defines the number of lines the initial letter should sink. Values must be greater than zero. If omitted, it duplicates the first argument, floored to the nearest positive whole number.
</dl>

An <dfn>initial letter</dfn> is a box to which 'initial-letter' applies
and is not ''initial-letter/normal'': this triggers the special layout considerations described below.

<div class="example">
  Here are some examples of 'initial-letter' usage:

  <dl>
    <dt>''initial-letter: 3''
    <dt>(''initial-letter: 3 3'')
    <dd>Represents a <a>dropped initial</a> 3 lines high, 3 lines deep.

      <img src="InitialLetter33.png" alt="3 lines high, 3 lines deep" width="360"/>

    <dt>''initial-letter: 3 2''
    <dd>Represents a <a>sunken initial</a> 3 lines high, 2 lines deep.

      <img src="InitialLetter32.png" alt="3 lines high, 2 lines deep" width="360"/>

    <dt>''initial-letter: 3 1''
    <dd>Represents a <a>raised initial</a> 3 lines high, 1 line deep.

      <img src="InitialLetter31.png" alt="3 lines high, 1 line deep" width="360"/>
  </dl>

</div>

<div class="example">
  The following code will create a 2-line dropped initial letter at the beginning of each paragraph:
  <pre>p::first-letter { initial-letter: 2; }</pre>
</div>



<!--
<h4 id="processing-model">Processing Model</h4>

<ol>
  <li>Find font size based on alignment points and font metrics. No layout information is required.</li>

  <li>Size content box to fit glyph with no overflow. The content box of a non-atomic inline initial letter is the smallest rectangle required to include the entirety of its glyphs and the margin boxes of any atomic inlines it contains.</li>

  <li>The initial letter's margin box is placed at the edge of the line. If it has no padding or borders, it is negatively offset by the distance from the start edge of its content box to the point in the content that would have been placed at the start edge of the containing block if it had ''initial-letter: none''.</li>

  <li>Exclude content within margin box.</li>
</ol>
 -->


Issue: Define interaction with Ruby. Easiest is to make it not apply to/within ruby.

The 'initial-letter' property does not apply to boxes that are not positioned at the start of the line due to bidi reordering.

<h3 id="aligning-initial-letter">
Alignment of Initial Letters: the 'initial-letter-align' property</h3>

As mentioned earlier, the alignment of initial letters depends on the script used. The 'initial-letter-align' property can be used to specify the proper alignment.

<pre class="propdef" id="initial-letter-align">
Name: <dfn id="propdef-initial-letter-align">initial-letter-align</dfn>
Value: [ auto | alphabetic | hanging | ideographic ]
Initial: auto
Applies to: <code>::first-letter</code> pseudo elements and inline level first child of a block container
Inherited: no
Percentages: N/A
Media: visual
Computed value: ???
</pre>


<dl dfn-type="value" dfn-for="initial-letter-align">
<dt>auto</dt>
<dd>The user agent selects the value which corresponds to the language of the text. Western languages would default to ''alphabetic'', CJK languages to ''ideographic'', and some Indic languages to ''hanging''. </dd>
<dt>alphabetic</dt>
<dd>As described above, the cap height of the initial letter aligns with the cap height of the first line of text. The baseline of the initial letter aligns with the baseline of the Nth text baseline.</dd>

<dt>hanging</dt>
<dd>The hanging baseline of the initial letter aligns with the hanging baseline of the first line of text.  </dd>

<dt>ideographic</dt>
<dd>The initial letter is centered in the N-line area. </dd>
</dl>

<p class="issue">Input from those knowledgeable about non-Western  typographic traditions would be very helpful in describing the appropriate alignments. More values may be required for this property.</p>

<div class="example">
The vertical writing mode example from <a href="#f2">Figure 2</a> could be coded as:

<pre>
span.initial {
  initial-letter: 2;
  initial-letter-alignment: ideographic;
}
</pre>


</div>

If 'initial-letter' is applied to an image or other atomic element that does not provide the necessary alignment information, the alignment points for the atomic inline must be synthesized from the content edges.

Note: For 'vertical-align', the alignment points of an atomic inline are synthesized from the margin edges. [[CSS3-WRITING-MODES]]

<h3 id="initial-letter-box">
Margins, Borders, and Padding</h3>

Initial letters can be styled with margins, padding, and borders just like any other box. Their vertical alignment and sizing is not affected; however the effective exclusion area is (and corresponds to the margin area).

When padding and borders are zero, the initial letter may be kerned; see below.

<h3 id="initial-letter-indentation">
Indentation and Multi-line Effects</h3>

'text-indent' and 'hanging-punctuation' apply to the first line of text as normal in the presence of initial letters. Lines affected by the exclusion are shortened, as in the presence of floats, and are affected the same way.

If an initial letter is too long to fit on one line, it wraps (according to the usual text-wrapping rules), each line filled and formatted exactly as if it were the first line and the initial letter too long to fit any subsequent normal text. Any normal text after the initial letter starts on its last line, affected exactly as if that line were the first line.


<figure>
  <img alt="multi-line drop cap"  src="Multi-line-initial.png" width="300">
  <p class="caption">Drop cap extends to two lines.</p>
</figure>


<!--
  ]]]]]]]]]]]]
  ]]]]]=======
  ============
-->
<h3 id="sizing-initial-letters">
Sizing Initial Letters</h3>

<p>The size of a drop initial is determined by the need to satisfy the required alignment. For an N-line drop initial in a Western script, the cap-height of the letter needs to be (N – 1) times the line-height, plus the cap-height of the surrounding text. Note this height is <b>not</b> the font size of the drop initial.</p>


<p>Actually calculating this font size is tricky. For an N-line drop initial, we find the drop initial font size to be:</p>


<figure>
<img src="InitialCapEquation.png" width="604" alt="Equation to calcuate drop initial font size"/>
</figure>

<!--
<pre>
Font size of drop cap = ((N-1) * line-height + [cap-height of para] * [font size of paragraph])/[cap-height ratio of drop initial font]
</pre>
-->

<!--

<div>

<math display="block"><mrow><mi>Font size of drop initial</mi><mo>=</mo></mrow><mfrac><mrow><mo>(</mo><mi>N</mi><mo>-</mo><mn>1</mn><mo>)</mo><mo>&#x00D7;</mo><mi>line-height</mi><mo>+</mo><mo>(</mo><mi>cap-height ratio of para font</mi><mo>&#x00D7;</mo><mi>font size of para</mi><mo>)</mo></mrow><mrow><mi>cap-height ratio of drop initial font</mi></mrow></mfrac></math>
</div>

-->

<div class="example">
  A three-line drop initial in Adobe Minion Pro would have a font size of 61.2pt, given 12pt text, 16pt line-height and a cap-height of 651/1000 (from the font’s OS/2 table).
</div>

The line height used in this calculation is the 'line-height' of the containing block (or, in the case where a baseline grid is in use, the baseline-to-baseline spacing required by the baseline grid [[CSS3-LINE-GRID]]). The contents of the lines spanned, and therefore any variation in their heights and positions, is not accounted for.

<h4 id="initial-letter-shaping">
Shaping and Glyph Selection</h4>

When 'initial-letter' is not ''normal'', shaping does not occur across the box's boundaries,
as if the zero-width non-joiner (U+200C) were inserted before/after the <a>initial letter</a>.
For example, if the first letter of the Farsi word “پس” were styled with ''initial-letter: 2 1'',
both letters would be styled in their isolated forms,
with “پ” as the initial letter, followed by the normally-styled “س”.

Issue: Are there other things we need to consider here?

<h3 id="initial-letter-exclusions">
Space Around Initial Letters</h3>

The glyph(s) of an initial letter do not always fit within the specified sink. For example, if an initial letter has a descender, it could crash into the (n+1)th line of text. This is not desirable.

<figure>
<img alt="3-line drop cap with J, with descender crashing into fourth line of text"  src="Dropcap-J-3line-crash.png" width="480">
<p class="caption">Incorrect: three-line initial letter with descender</p>
</figure>

Text is therefore excluded around the glyph bounding boxes of the initial letters.

Specifically, for non-atomic initial letters, the content box of the element is sized to fit:

<ul>
  <li>The specified amount of sink (i.e the distance from the top alignment point to the bottom alignment point).
  <li>The actual ascent and descent and side bearings of all the glyphs it contains that are part of its inline formatting context, even if they leak outside their em boxes.
  <li>The margin boxes of all the atomic inlines it contains that are part of its inline formatting context, even if they leak outside its own line-height.
</ul>

The margin box of the initial letter is then made an exclusion area for subsequent text.

<figure>
<img alt="3-line drop cap with J, but four-line exclusion"  src="Dropcap-J-3line-exclude.png" width="480">
<p class="caption">Correct: text excluded around glyph bounding box</p>
</figure>

<h3 id="initial-letter-position">
Positioning and Kerning Initial Letters</h3>

In the <a>block axis</a>, the <a>initial letter</a> is positioned to satisfy its alignment requirements. (See 'initial-letter-align'.)

In the <a>inline axis</a>, the position of the inline letter is given by aligning its start margin edge to the start edge of the containing block.

However, if the <a>initial letter</a> is a non-atomic inline with zero padding and borders, the UA must apply an additional negative offset on the start side of the amount necessary to optically align the first glyph to the containing block edge as it would be in normal text.

Additionally, when borders and padding are zero
and the next <a>typographic character unit</a> after the <a>initial letter</a>
is not a space (<a>Unicode general category</a> <code>Zs</code>),
the UA should optically kern the first line of text into the <a>initial letter</a>’s area
as necessary to maintain perceptual continuity of the text.

<figure>
<img src="OpticalKerning.png" alt="optical kerning in the presence or absence of a space after the initial letter" width="200"/>
<p class="caption">In the top paragraph, the initial letter "A" has a word space after it. In the middle paragraph, the initial letter "A" is part of a word. In this case, the first line of text should be kerned into the initial letter's area as shown in the bottom paragraph.</p>
</figure>

<h3 id="initial-letter-paragraphs">
Clearing Initial Letters</h3>

<h4 id="raised-sunken-caps">
Raised and sunken caps</h4>

An initial letter does not affect the position of its containing element. For “raised caps” or “sunken caps,” the effect is created as if the text around the initial letter was pushed down, rather than the letter extending up into previous elements.


<figure>
<img src="initial-letter-drop-para-compare.png" alt="raised cap para after normal para" width="600"/>
<p class="caption">Raised cap (<code>initial-letter: 3 1</code>) on right; note that the position of the “C” is the same in both cases, but on the right all text is moved down relative to the initial letter.</p>
</figure>

Issue: Handle glyph ink above cap height of font.


<h4 id="short-para-initial-letter">
Short paragraphs with initial letters</h4>

A paragraph with an initial letter can have fewer lines of text than the initial letter occupies. In this case, the initial letter’s top alignment is still honored, and its exclusion area continues into any subsequent blocks. This forces the subsequent inline-level content to wrap around the initial letter&mdash;exactly as if that block's text were part of its own containing block. (This is similar to how floats exclude content in subsequent block boxes.)

<figure>
<img src="initial-letter-short-para.png" alt="short para with initial letter" width="600"/>
<p class="caption">The red text is a short paragraph with an initial letter. Note the subsequent paragraph wraps around the initial letter just as text in the paragraph with the initial letter does.</p>
</figure>

If the subsequent block starts with an initial letter,
establishes a new formatting context,
or specifies 'clear' in the initial letter’s containing block’s start direction,
then it must clear the previous block’s initial letter.

<figure>
  <img src="initial-letter-short-para-initial.png" alt="short para with initial letter followed by para with initial" width="600"/>
  <p class="caption">The red text is a short paragraph with an initial letter. The subsequent paragraph clears because it also has an initial letter.</p>
</figure>

<h4 id="initial-letter-floats">
Interaction with floats</h4>

Floats always clear an initial letter when floated to the same side. When floated to the opposite side, they are pushed down to clear the initial letter only if they have specified 'clear' to this side or they do not fit without overlapping the initial letter.

Issue: Is this the behavior we want? What if the float is on the same line as the initial letter?


<h2 class="no-num" id="ack">
Acknowledgments</h2>

<p>Special thanks goes to the initial authors,
Eric A. Meyer and Michel Suignard.

<p>In additions to the authors, this specification would not have been possible without the help from:

<p>David Baron, John Daggett, Stephen Deach, Sujal Parikh, Grzegorz Zygmunt, Chris Wilson, David M Brown, Bobby Tung, Shinyu Murakami, David Hyatt, Sylvain Galineau, Alan Stearns, Ted O'Connor.
