<h1>CSS Animations Level 2</h1>

<style type="text/css">
  table.play-state-transitions {
    empty-cells: hide;
    border-spacing: 0px;
  }
  table.play-state-transitions td {
    padding: 0.2em 1em;
    border: 1px solid black;
  }
  table.play-state-transitions th.rowgroup {
    transform: rotate(-180deg);
    writing-mode: vertical-lr;
    padding-left: 5px;
  }
</style>

<pre class='metadata'>
Status: ED
Work Status: Exploring
Shortname: css-animations-2
Level: 2
Group: csswg
ED: http://dev.w3.org/csswg/css-animations-2/
Editor: L. David Baron, Mozilla, dbaron@dbaron.org
!Issues List: <a href="https://www.w3.org/Bugs/Public/buglist.cgi?component=Animations&list_id=36653&product=CSS&query_format=advanced&resolution=---">In Bugzilla</a>

Abstract: This CSS module describes a way for authors to animate the values of CSS properties over time, using keyframes. The behavior of these keyframe animations can be controlled by specifying their duration, number of repeats, and repeating behavior.
</pre>
<pre class="anchors">
urlPrefix: https://w3c.github.io/web-animations/; type: interface; spec: web-animations
    text: Animation
    text: KeyframeEffectReadOnly
    text: KeyframeEffect
urlPrefix: https://w3c.github.io/web-animations/; type: method; for: Animation; spec: web-animations
    text: play()
    text: pause()
urlPrefix: https://w3c.github.io/web-animations/; type: dfn; spec: web-animations
    text: animation
    text: animation playback rate
    text: animation sequence number
    text: animation start time
    text: animation type
    text: cancel an animation
    text: composite operation
    text: current time
    text: current iteration
    text: global animation list
    text: idle play state
    text: play an animation
    text: sampling
    text: start delay
    text: start time
    text: target effect
    text: target effect end
    text: target element
    text: unresolved
urlPrefix: https://html.spec.whatwg.org/; type: dfn; spec: HTML
    text: active document
</pre>

<h2 id="delta">Delta specification</h2>

<p>This is a delta specification, meaning that it currently contains
only the differences from CSS Animations Level 1 [[!CSS3-ANIMATIONS]].
Once the Level 1 specification is closer to complete, it will be merged
with the additions here into a complete level 2 specification.</p>

# Introduction # {#introduction}

Append: This specification builds on the animation model defined in Web
Animations [[!WEB-ANIMATIONS]].

# Animations # {#animations}

Note, large parts of this section have been removed since this behavior is
defined in Web Animations.

CSS Animations generates <a>animation</a> objects. The <a>animation start
time</a> is the time at which the style applying the animation and the
corresponding @keyframes rule are both resolved.
f an animation is specified for an element but the corresponding
keyframes rule does not yet exist, the <a>animation</a> cannot start; the
animation will start from the beginning as soon as a matching @keyframes
rule can be resolved. An animation specified by dynamically modifying the
element's style will start when this style is resolved; that may be
immediately in the case of a pseudo style rule such as hover, or may be
when the scripting engine returns control to the browser (in the case of
style applied by script). Note that dynamically updating keyframe style
rules does not start or restart an animation.

Note, that so long as there is no matching @keyframes rule it is unobservable
whether a user agent generates an <a>animation</a> and assigns it an
<a>unresolved</a> <a>start time</a> or simply defers creating an
<a>animation</a> altogether since there is no API that returns
<a lt="idle play state">idle</a> animations. Either implementation is
acceptable.

An animation applies to an element if its name appears as one of the
identifiers in the computed value of the 'animation-name' property and the
animation uses a valid @keyframes rule. Once an
animation has started it continues until it ends or the 'animation-name' is
removed. Changing the values of animation properties updates the properties
of any running <a>animations</a>.

Note also that changing the value
of 'animation-name' does not necessarily restart an animation (e.g., if a list
of animations are applied and one is removed from the list, only that animation
will stop; The other animations will continue). In order to restart an
animation using only CSS markup, it must be removed then reapplied.

  <div class='example'>
    <pre>
    div {
      animation-name: diagonal-slide;
      animation-duration: 5s;
      animation-iteration-count: 10;
    }

    @keyframes diagonal-slide {

      from {
        left: 0;
        top: 0;
      }

      to {
        left: 100px;
        top: 100px;
      }

    }
    </pre>

    This will produce an animation that moves an element from (0, 0) to
    (100px, 100px) over five seconds and repeats itself nine times
    (for a total of ten iterations).

  </div>

Setting the 'display' property to ''display/none'' will <a lt="cancel an
animation">cancel</a> any running animation applied to the element and its
descendants. If an element has a 'display' of ''display/none'', updating
'display' to a value other than ''display/none'' will cause all animations
applied to the element by the 'animation-name' property to be recreated, as well
as all animations applied to descendants with 'display' other than
''display/none''.

While authors can use animations to create dynamically changing content,
dynamically changing content can lead to seizures in some users. For information
on how to avoid content that can lead to seizures, see Guideline 2.3: Seizures:
Do not design content in a way that is known to cause seizures ([[!WCAG20]]).

Implementations may ignore animations when the rendering medium is not
interactive e.g. when printed.
A future version of this specification may define how to render animations for
these media.

# Keyframes # {#keyframes}

## The 'animation-name' property ## {#animation-name}

Issue: Need to add something like this: <a
href="https://lists.w3.org/Archives/Public/www-style/2015Jul/0391.html">https://lists.w3.org/Archives/Public/www-style/2015Jul/0391.html</a>.

## The 'animation-play-state' property ## {#animation-play-state}

### Interaction between 'animation-play-state' and the Web Animations API ### {#interaction-between-animation-play-state-and-web-animations-API}

Both this specification and the Web Animations specification [[WEB-ANIMATIONS]]
define mechanisms for pause control, specifically the 'animation-play-state'
property, and the {{Animation/play()}} and {{Animation/pause()}} methods
respectively.

<div class="note">

The interaction of these methods can be summarized as follows:

*   Calling {{Animation/pause()}} is sticky. The animation will remain paused
    until there is a subsequent call to {{Animation/play()}} after which point
    the animation will begin tracking changes to the computed value of the
    'animation-play-state' property on the <a>owning element</a> from the next
    moment it becomes newly ''paused''.
*   In the computed 'animation-play-state' on the <a>owning element</a> is
    ''paused'', calling {{Animation/play()}} will temporarily override the
    'animation-play-state' until it next becomes ''running''.

</div>

With regards to the pausing, an animation can be considered to be in one of
five mutually-exclusive states:

<ul style="list-style-type: upper-latin">
<li>Running
<li>Running and temporarily overriding 'animation-play-state': ''paused''
<li>Paused and sticky overriding 'animation-play-state': ''running''
<li>Paused and sticky overriding 'animation-play-state': ''paused''
<li>Paused by 'animation-play-state'
</ul>

A state transition chart follows:

<table class="play-state-transitions">
<tr>
  <td rowspan="2"></td>
  <td></td>
  <th colspan="5">Initial state</th>
</tr>
<tr>
  <th>Event</th>
  <th>A</th>
  <th>B</th>
  <th>C</th>
  <th>D</th>
  <th>E</th>
</tr>
<tr>
  <th rowspan="4" class="rowgroup">Resulting state</th>
  <td>{{Animation/play()}}</td>
  <td>A</td>
  <td>B</td>
  <td>A</td>
  <td>B</td>
  <td>B</td>
</tr>
<tr>
  <td>{{Animation/pause()}}</td>
  <td>C</td>
  <td>D</td>
  <td>C</td>
  <td>D</td>
  <td>D</td>
</tr>
<tr>
  <td>'animation-play-state' &rarr; ''running''</td>
  <td>A</td>
  <td>A</td>
  <td>C</td>
  <td>C</td>
  <td>A</td>
</tr>
<tr>
  <td>'animation-play-state' &rarr; ''paused''</td>
  <td>E</td>
  <td>B</td>
  <td>D</td>
  <td>D</td>
  <td>E</td>
</tr>
</table>

Issue: Need to define the difference between setting 'animation-play-state' to
''running'' and calling {{Animation/play()}}. Specifically, the former
follows the same procedure to <a>play an animation</a> but does <em>not</em>
perform the snapping behavior that results from comparing the <a>current
time</a> to zero or the <a>target effect end</a>. This probably requires
rearranging the algorithm in Web Animations to take an extra argument to opt-out
of this behavior.

</div>

## The 'animation-composition' property ## {#animation-composition}

The 'animation-composition' property defines the <a>composite operation</a>
used when multiple animations affect the same property simultaneously.

<pre class='propdef'>
Name: animation-composition
Value: <<single-animation-composition>>#
Initial: replace
Applies to: all elements, ::before and ::after pseudo-elements
Inherited: none
Animatable: no
Percentages: N/A
Media: interactive
Computed value: As specified
Canonical order: per grammar
</pre>

<dfn>&lt;single-animation-composition></dfn> = replace | add | accumulate

The values of 'animation-composition' have the meaning defined for the
corresponding values values of the <a>composite operation</a> defined in Web
Animations [[!WEB-ANIMATIONS]].

When specified in a keyframe, 'animation-composition' defines the operation
used for each property specified in that keyframe until the next keyframe
specifying each property.

<div class='example'>
  For example, the following stylesheet defines two different animations
  targetting the 'scale' property.

  <pre>
    @keyframes heartbeat {
      from {
        scale: 1;
        animation-timing-function: ease-out;
      }
      30% {
        scale: 1.3;
      }
    }
    .heartbeat {
      animation: heartbeat 0.3s 2s infinite;
    }

    @keyframes throb {
      50% {
        scale: 1.8;
      }
    }
    .icon:mouseover {
      animation: throb 0.4s add;
    }
  </pre>

  If these two animations are applied to the same element, normally only
  one animation would apply, but by specifying ''add'' as the
  'animation-composition' on the second animation, the result of the two
  animations will be combined.

  Since CSS Transitions [[CSS3-TRANSITIONS]] have a lower composite
  order, it is possible to use 'animation-composition' to combine CSS
  Animations with underlying transitions as in the following example.

  <pre>
    .icon {
      filter: blur(20px);
      transition: filter 0.5s;
    }
    .icon:hover {
      filter: blur(0px);
      animation: brightness-pulse 3s infinite add;
    }

    @keyframes pulse {
      0% {
        scale: 1.1;
        filter: brightness(130%);
      }
      10% {
        scale: 1;
        filter: brightness(100%);
      }
    }
  </pre>

  Issue: Create pictures of these examples and verify they make sense.
</div>

## Owning element ## {#owning-element-section}

The <dfn>owning element</dfn> of a CSS Animation refers to the element or
pseudo-element to which the 'animation-name' property was applied that generated
the animation.

If an animation was generated directly by script (e.g. using
the {{CSSAnimation()}} constructor) then it has no <a>owning element</a>.

If an animation generated using the markup defined in this specification is
later disassociated from that markup by an update to the computed value of the
'animation-name' property on the <a>owning element</a>, the animation is
dissasociated from its <a>owning element</a> (that is, it has no <a>owning
element</a> from that point forwards).

<div class="note">

In the example below, <code>animation</code> initially has an <a>owning
element</a> but the association is broken through an update to the
computed value of <code>elem</code>'s 'animation-name' property.

<pre class="example lang-javascript">
elem.style.animation = 'spin 1s';
let animation = elem.getAnimations()[0]; // |animation|'s owning element is elem
elem.style.animation = ''; // |animation| no longer has an owning element
</pre>

Note that although the <a>owning element</a> is often equal to the <a>target
element</a> of an animation's <a>target effect</a>, this is not always the case.
The following example demonstrates some of the situations where these two
elements may differ.

<pre class="example lang-javascript">
elem.style.animation = 'move 1s';
let animation = elem.getAnimations()[0];
// animation.effect.target == elem == animation's owning element

let mutableEffect = animation.effect.clone();
animation.effect = mutableEffect;
animation.effect.target = elem2;
// animation.effect.target == elem2 != animation's owning element

animation.effect = null;
// animation.effect.target is undefined != animation's owning element
</pre>

</div>

## Animation composite order ## {#animation-composite-order}

<a spec='web-animations'>Animations</a> generated from the markup and
interfaces (e.g. the {{CSSAnimation()}} constructor) defined in this
specification have an <a>animation type</a> of &lsquo;CSS Animation&rsquo;.

CSS Animations <em>with</em> an <a>owning element</a> have a <em>later</em>
composite order than CSS Transitions but an <em>earlier</em> composite order
than animations without a specific <a>animation type</a>.

Within the set of CSS Animations <em>with</em> an <a>owning element</a>, two
animations <var>A</var> and <var>B</var> are sorted in composite order (first to
last) as follows:

1.  If the <a>owning element</a> of <var>A</var> and <var>B</var>
    differs, sort <var>A</var> and <var>B</var> by <a>tree order</a>
    of their corresponding <a>owning elements</a>.
    With regard to pseudo-elements, the sort order is as follows:

    *  element
    *  ::before
    *  ::after
    *  element children

1.  Otherwise, sort <var>A</var> and <var>B</var> based on their position in the
    computed value of the 'animation-name' property of the (common) <a>owning
    element</a>.

The composite order of CSS Animations <em>without</em> an <a>owning element</a>
is based on their position in the <a>global animation list</a>.

CSS Animations generated using the markup defined in this specification are
<em>not</em> added to the <a>global animation list</a> when they are created.
Instead, these animations are appended to the <a>global animation list</a> at
the first moment when they transition out of the <a>idle play state</a> after
being disassociated from their <a>owning element</a>.
CSS Animations that have been disassociated from their <a>owning element</a>
but are still <a lt="idle play state">idle</a> do not have a defined
composite order.

Note, this behavior relies on the fact that disassociating an animation
from its <a>owning element</a> always causes it to enter (or remain) in the
<a>idle play state</a>.

CSS Animations created using the {{CSSAnimation()}} constructor are appended
to the <a>global animation list</a> at the moment they are constructed.

Issue: Would it be more consistent to append them at the moment they first
transition out of idle? (Just for animations created using {{CSSAnimation()}},
<em>not</em> for generic {{Animation}} objects.)

# Animation events # {#events}

<h3 id="event-animationevent">Types of <code>AnimationEvent</code></h3>

  <p>The <em>additional</em> types of animation events that can occur are:</p>

  <dl dfn-type=event dfn-for=animationevent>
    <dt><dfn>animationcancel</dfn>
    <dd>
      The <a idl>animationcancel</a> event occurs when the animation stops
      running in a way that does not fire an <a idl>animationend</a> event, such
      as a change in the 'animation-name' that removes the animation, or the
      animating element or one of its ancestors becoming ''display:none''.
      <ul>
        <li>Bubbles: Yes</li>
        <li>Cancelable: No</li>
        <li>Context Info: animationName, elapsedTime, pseudoElement</li>
      </ul>
  </dl>

## Event dispatch ## {#event-dispatch}

Note, this is a more general description of event dispatch than that of CSS
Animations Level 1 [[CSS3-ANIMATIONS]] since it must account for the
possibility of animations being seeked using the Web Animations API
[[WEB-ANIMATIONS]].

For the purpose of determining which events to dispatch, an animation can
be considered to be in one of four mutually-exclusive <dfn
lt="event state">event states</dfn> determined using the following procedure:

1.  If the animation is <a lt="idle play state">idle</a> or has no <a>target
    effect</a> it is <dfn>idle</dfn>.
1.  Otherwise, if the animation has a <a>current time</a> less than the
    <a>start delay</a> of its <a>target effect</a>, or, if the animation's
    <a lt="animation playback rate">playback rate</a> is less than zero and
    it has a <a>current time</a> less than <em>or equal</em> to the
    <a>start delay</a> of its <a>target effect</a>, it is
    <dfn>left-active</dfn>.
1.  Otherwise, if the animation has a <a>current time</a> greater than its
    <a>target effect end</a>, or, if the animation's
    <a lt="animation playback rate">playback rate</a> is greater than or equal
    to zero and it has a <a>current time</a> greater than <em>or equal</em> to
    its <a>target effect end</a>, it is <dfn>right-active</dfn>.
1.  Otherwise, it is <dfn>active</dfn>.

Each time the animation is <a lt="sampling">sampled</a>, the events to
dispatch are determined by comparing the <a>event state</a> before and
after the sample as follows:

:    not <a>active</a> &rarr; <a>active</a>
::   animationstart
:    <a>left-active</a> &rarr; <a>right-active</a>
:    <a>right-active</a> &rarr; <a>left-active</a>
::   animationstart, animationend
:    <a>active</a> &rarr; <a>left-active</a>
:    <a>active</a> &rarr; <a>right-active</a>
::   animationend
:    <a>active</a> &rarr; <a>active</a>
::   animationiteration <em>if</em> there has been a change to the animation's
     <a>target effect</a>'s <a>current iteration</a>
:    not <a>idle</a> &rarr; <a>idle</a>
::   animationcancel

# DOM interfaces # {#interface-dom}

## The CSSAnimation interface ## {#the-CSSAnimation-interface}

<pre class="idl">
[Constructor(DOMString animationName)]
interface CSSAnimation : Animation {
  readonly attribute DOMString animationName;
};
</pre>

:   <dfn constructor for=CSSAnimation
      lt="CSSAnimation(animationName)">CSSAnimation (animationName)</dfn>
::  Creates a new {{CSSAnimation}} object.

    The <a>target effect</a> of the newly-created object is a
    {{KeyframeEffectReadOnly}} object created using the procedure defined
    in [[#animation-name]] and using
    the <a>active document</a> as the context document.
    The created {{KeyframeEffectReadOnly}} object continues to track changes
    to keyframes rules so long as it is attached to this object.

    Issue: It is not clear what the most reasonable behavior is here regarding
    liveness. Could we make the generated object always track changes?
    That would suggest a special sub-type of {{KeyframeEffectReadOnly}} that
    tracks its context document and animationName. Alternatively we could make
    it a one-shot thing that creates a {{KeyframeEffect}} object.

:   <dfn attribute for=CSSAnimation>animationName</dfn>
::  The key used to find matching keyframes rules that define <a>target
    effect</a> at the point when the animation was created.
    This is the value of the 'animation-name' property that caused this
    object to be generated or, if this object was generated using the
    programming interface, the <code>animationName</code> argument
    that was passed to the {{CSSAnimation()}} constructor.

## Requirements on pending style changes ## {#requirements-on-pending-style-changes}

Various operations may affect the <a lt="computed value">computed values</a> of
properties on elements. User agents may, as an optimization, defer recomputing
these values until it becomes necessary.
However, all operations included in programming interface defined in this
specification, as well as those operations defined in Web Animations
[[!WEB-ANIMATIONS]] that may return objects defined by this specification,
must produce a result consistent with having fully processed any such pending
changes to computed values.

<div class="note">
As an example, in the following code fragment, when the specified style of
<code>elem</code> is initially updated, a user agent may defer recalculating
the computed value of the 'animation' property.

However, the <code>getAnimations</code> method from the {{Element}} interface
which is specified by [[!WEB-ANIMATIONS]] can return {{CSSAnimation}} objects as
defined in this specification, and hence the user agent must calculate the
updated value <code>elem</code>'s 'animation' property and create
the requested {{CSSAnimation}} object before returning its result.

<div><pre class="example lang-javascript">
elem.style.animation = 'fadeOut 1s';
elem.getAnimations()[0].pause();
</pre></div>

</div>
