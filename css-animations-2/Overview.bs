<h1>CSS Animations Level 2</h1>

<pre class='metadata'>
Status: ED
Work Status: Exploring
Shortname: css-animations-2
Level: 2
Group: csswg
ED: http://dev.w3.org/csswg/css-animations-2/
Editor: L. David Baron, Mozilla, dbaron@dbaron.org
!Issues List: <a href="https://www.w3.org/Bugs/Public/buglist.cgi?component=Animations&list_id=36653&product=CSS&query_format=advanced&resolution=---">In Bugzilla</a>

Abstract: This CSS module describes a way for authors to animate the values of CSS properties over time, using keyframes. The behavior of these keyframe animations can be controlled by specifying their duration, number of repeats, and repeating behavior.
</pre>
<pre class="anchors">
urlPrefix: http://w3c.github.io/web-animations/; type: interface; spec: web-animations
    text: Animation
    text: KeyframeEffectReadOnly
    text: KeyframeEffect
urlPrefix: http://w3c.github.io/web-animations/; type: dfn; spec: web-animations
    text: animation
    text: animation playback rate
    text: animation sequence number
    text: animation type
    text: current time
    text: current iteration
    text: idle play state
    text: sampling
    text: start delay
    text: target effect
    text: target effect end
urlPrefix: https://html.spec.whatwg.org/; type: dfn; spec: HTML
    text: active document
</pre>

<h2 id="delta">Delta specification</h2>

<p>This is a delta specification, meaning that it currently contains
only the differences from CSS Animations Level 1 [[!CSS3-ANIMATIONS]].
Once the Level 1 specification is closer to complete, it will be merged
with the additions here into a complete level 2 specification.</p>

# Animations # {#animations}

## Resolving an 'animation-name' ## {#resolving-an-animation-name}

Issue: Something like this: <a
href="https://lists.w3.org/Archives/Public/www-style/2015Jul/0391.html">https://lists.w3.org/Archives/Public/www-style/2015Jul/0391.html</a>.

# Keyframes # {#keyframes}

## The 'animation-composition' property ## {#animation-composition}

TBD

<pre class='propdef'>
Name: animation-composition
Value: <<single-animation-composition>>#
Initial: replace
Applies to: all elements, ::before and ::after pseudo-elements
Inherited: none
Animatable: no
Percentages: N/A
Media: interactive
Computed value: As specified
Canonical order: per grammar
</pre>

<dfn>&lt;single-animation-composition></dfn> = replace | add | accumulate

The values of 'animation-composition' have the following meanings:

TBD

## Animation events ## {#animation-events}

<h3 id="event-animationevent">Types of <code>AnimationEvent</code></h3>

  <p>The <em>additional</em> types of animation events that can occur are:</p>

  <dl dfn-type=event dfn-for=animationevent>
    <dt><dfn>animationcancel</dfn>
    <dd>
      The <a idl>animationcancel</a> event occurs when the animation stops
      running in a way that does not fire an <a idl>animationend</a> event, such
      as a change in the 'animation-name' that removes the animation, or the
      animating element or one of its ancestors becoming ''display:none''.
      <ul>
        <li>Bubbles: Yes</li>
        <li>Cancelable: No</li>
        <li>Context Info: animationName, elapsedTime, pseudoElement</li>
      </ul>
  </dl>

## Event dispatch ## {#event-dispatch}

Note: This is a more general description of event dispatch than that of CSS
Animations Level 1 [[CSS3-ANIMATIONS]] since it must account for the
possibility of animations being seeked using the Web Animations API
[[WEB-ANIMATIONS]].

For the purpose of determining which events to dispatch, an animation can
be considered to be in one of four mutually-exclusive <dfn
lt="event state">event states</dfn> determined using the following procedure:

1.  If the animation is <a lt="idle play state">idle</a> or has no <a>target
    effect</a> it is <dfn>idle</dfn>.
1.  Otherwise, if the animation has a <a>current time</a> less than the
    <a>start delay</a> of its <a>target effect</a>, or, if the animation's
    <a lt="animation playback rate">playback rate</a> is less than zero and
    it has a <a>current time</a> less than <em>or equal</em> to the
    <a>start delay</a> of its <a>target effect</a>, it is
    <dfn>left-active</dfn>.
1.  Otherwise, if the animation has a <a>current time</a> greater than its
    <a>target effect end</a>, or, if the animation's
    <a lt="animation playback rate">playback rate</a> is greater than or equal
    to zero and it has a <a>current time</a> greater than <em>or equal</em> to
    its <a>target effect end</a>, it is <dfn>right-active</dfn>.
1.  Otherwise, it is <dfn>active</dfn>.

Each time the animation is <a lt="sampling">sampled</a>, the events to
dispatch are determined by comparing the <a>event state</a> before and
after the sample as follows:

:    not <a>active</a> &rarr; <a>active</a>
::   animationstart
:    <a>left-active</a> &rarr; <a>right-active</a>
:    <a>right-active</a> &rarr; <a>left-active</a>
::   animationstart, animationend
:    <a>active</a> &rarr; <a>left-active</a>
:    <a>active</a> &rarr; <a>right-active</a>
::   animationend
:    <a>active</a> &rarr; <a>active</a>
::   animationiteration <em>if</em> there has been a change to the animation's
     <a>target effect</a>'s <a>current iteration</a>
:    not <a>idle</a> &rarr; <a>idle</a>
::   animationcancel


# Web Animations Instantiation of CSS Animations # {#web-animations-instantiation-of-CSS-animations}

TODO: Copy prose from integration spec

## Animation priority ## {#animation-priority}

The <a spec='web-animations'>animations</a> generated from the markup and
interfaces (e.g. the {{CSSAnimation()}} constructor) defined in this
specification have an <a>animation type</a> of &lsquo;CSS Animation&rsquo;.

CSS Animations have a <em>higher</em> priority that CSS Transitions but
a <em>lower</em> priority than animations without a specific <a>animation
type</a>.

Within the set of CSS Animations, two animations <var>A</var> and <var>B</var>
are sorted in priority order (lowest to highest) as follows:

1.  Define the <dfn>owning element</dfn> as the element or pseudo-element to
    which the 'animation-name' property was applied that generated this CSS
    Animation.
    If the CSS Animation was generated directly by script (e.g. using
    the {{CSSAnimation}} constructor) then it has no <a>owning element</a>.

1.  If neither <var>A</var> nor <var>B</var> has an <a>owning element</a>,
    sort based on <var>A</var> and <var>B</var> such that their <a
    spec='web-animations'>animation sequence numbers</a> are in ascending order.

1.  Otherwise, if  only one of <var>A</var> or <var>B</var> has an <a>owning
    element</a>, let the animation <em>with</em> an <a>owning element</a> sort
    first.

1.  Otherwise, if the <a>owning element</a> of <var>A</var> and <var>B</var>
    differs, sort <var>A</var> and <var>B</var> by <a>tree order</a>
    of their corresponding <a>owning elements</a>.
    With regard to pseudo-elements, the sort order is as follows:

    *  element
    *  ::before
    *  ::after
    *  element children

1.  Otherwise, sort <var>A</var> and <var>B</var> based on their position in the
    computed value of the 'animation-name' property of the (common) <a>owning
    element</a>.

## Interaction between 'animation-play-state' and Web Animations API ## {#interaction-between-animation-play-state-and-web-animations-API}

# DOM interfaces # {#DOM-interfaces}

## The CSSAnimation interface ## {#the-CSSAnimation-interface}

<pre class="idl">
[Constructor(DOMString animationName)]
interface CSSAnimation : Animation {
  readonly attribute DOMString animationName;
};
</pre>

:   <dfn constructor for=CSSAnimation
      lt="CSSAnimation(animationName)">CSSAnimation (animationName)</dfn>
::  Creates a new {{CSSAnimation}} object.

    The <a>target effect</a> of the newly-created object is a
    {{KeyframeEffectReadOnly}} object created using the procedure defined
    in [[#resolving-an-animation-name]] and using
    the <a>active document</a> as the context document.
    The created {{KeyframeEffectReadOnly}} object continues to track changes
    to keyframes rules so long as it is attached to this object.

    Issue: It is not clear what the most reasonable behavior is here regarding
    liveness. Could we make the generated object always track changes?
    That would suggest a special sub-type of {{KeyframeEffectReadOnly}} that
    tracks its context document and animationName. Alternatively we could make
    it a one-shot thing that creates a {{KeyframeEffect}} object.

:   <dfn attribute for=CSSAnimation>animationName</dfn>
::  The key used to find matching keyframes rules that define <a>target
    effect</a> at the point when the animation was created.
    This is the value of the 'animation-name' property that caused this
    object to be generated or, if this object was generated using the
    programming interface, the {{CSSAnimation()/animationName}} argument
    that was passed to the {{CSSAnimation()}} constructor.

## Style updates and script changes ## {#style-updates-and-script-changes}

TBD. We need to say that all animation interfaces defined in this specification
assume style has been updated.  i.e. the following works:

<div><pre class="example lang-javascript">
elem.style.animation = 'fadeOut 1s';
elem.getAnimations()[0].pause();
</pre></div>
