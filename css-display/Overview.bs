<h1>CSS Display Module Level 3</h1>

<pre class='metadata'>
Status: WD
Date: 2014-09-11
ED: http://dev.w3.org/csswg/css-display/
Shortname: css-display
Group: csswg
Level: 3
TR: http://www.w3.org/TR/css-display-3/
Previous Version: http://www.w3.org/TR/2014/WD-css-display-3-20140220/
Editor: Tab Atkins Jr., Google, http://xanthir.com/contact/
Editor: fantasai, Invited Expert, http://fantasai.inkedblade.net/contact
Abstract: This module describes how the CSS formatting box tree is generated from the document element tree and defines the 'display' and 'box-suppress' properties that control it.
Ignored Terms: display-model, display-role, table row group box
</pre>

<h2 id="intro">
Introduction</h2>

	<p><em>This section is not normative.</em>

	The 'display' property, introduced in CSS 2.1,
	defines what kind of boxes an element generates
	(and whether it generates boxes at all),
	and how it lays out its contents.

	These concepts are actually rather independent,
	though they're conflated by the 'display' property.
	This causes some pain when a property value intended to affect one aspect
	(such as setting an element to ''display:none'' to suppress box generation)
	affects another aspect
	(such as losing the memory of what it was <em>before</em> ''display:none'',
	so that it can be set back to that value later).

	This specification subsumes the CSS 2.1 definition of the 'display' property,
	and redefines it to be a shorthand property for a small family of longhands,
	each controlling an independent aspect of an element's "display".


<h3 id="placement">
Module interactions</h3>

	This specification transforms the 'display' property into a shorthand property,
	and defines several longhand properties that it expands into or effects.

	This module replaces and extends the definition of the 'display' property defined in [[!CSS21]] section 9.2.4.

	None of the properties in this module apply to the <code>::first-line</code> or <code>::first-letter</code> pseudo-elements.

<h3 id="values">
Values</h3>

	This specification follows the
	<a href="http://www.w3.org/TR/CSS21/about.html#property-defs">CSS property
	definition conventions</a> from [[!CSS21]]. Value types not defined in
	this specification are defined in CSS Level 2 Revision 1 [[!CSS21]].
	Other CSS modules may expand the definitions of these value types.

	In addition to the property-specific values listed in their definitions,
	all properties defined in this specification also accept the
	<a href="http://www.w3.org/TR/css3-values/#common-keywords">CSS-wide keywords</a>
	as their property value. For readability it has not been repeated explicitly.

<h2 id='the-display-properties'>
Controlling Layout Modes: the 'display' property</h2>

	The 'display' property controls the layout mode of elements
	(how the element determines the sizes and positions of itself and its descendants),
	and what boxes they and their descendants generate.

	<pre class="propdef">
	Name: display
	Value: [ <<display-inside>> || <<display-outside>> ] | <<display-listitem>> | <<display-internal>> | <<display-box>> | <<display-legacy>>
	Initial: inline
	Applies to: all elements
	Inherited: no
	Computed value: as specified
	Animatable: no
	Media: all
	</pre>

	<pre class='prod'>
	<dfn>&lt;display-inside></dfn>   = flow | flow-root | table | flex | grid | ruby ;
	<dfn>&lt;display-outside></dfn>  = block | inline | run-in ;
	<dfn>&lt;display-listitem></dfn> = list-item && <<display-outside>>? && [ flow | flow-root ]?
	<dfn>&lt;display-box></dfn> = contents | none ;
	<dfn>&lt;display-internal></dfn> = table-row-group | table-header-group |
	                     table-footer-group | table-row | table-cell |
	                     table-column-group | table-column | table-caption |
	                     ruby-base | ruby-text | ruby-base-container |
	                     ruby-text-container ;
	<dfn>&lt;display-legacy></dfn>   = inline-block | inline-list-item |
	                     inline-table | inline-flex | inline-grid ;
	</pre>

	The 'display' property defines two basic qualities
	of how an element generates boxes:

	* the <dfn export local-lt="inner">inner display type</dfn>,
		which defines the kind of <a>formatting context</a> it generates,
		dictating how its descendant boxes are laid out.
	* the <dfn export local-lt="outer">outer display type</dfn>,
		which dictates how the box participates in its parent formatting context.

	Additionally, it controls some other box-generation details,
	such as whether an element is a <a>list item</a> that generates a ''::marker'' pseudo-element.

<h3 id="major-layout-modes">
The Major Layout Modes</h3>

	The most common values of display correspond directly to the major layout algorithms in CSS.

	The <<display-inside>> keywords specify the element's <a>inner display type</a>,
	and are defined as follows:

	<dl dfn-type="value" dfn-for="display, <display-inside>">
		<dt><dfn>flow</dfn>
		<dd>
			The element lays out its contents using flow layout.
			(Also known as "block" or "inline" layout.) [[!CSS21]]

		<dt><dfn>flow-root</dfn>
		<dd>
			The element lays out its contents using flow layout,
			and establishes a <a>block formatting context</a>. [[!CSS21]]

		<dt><dfn>table</dfn>
		<dd>
			The element lays out its contents using table layout. [[!CSS21]]

		<dt><dfn>flex</dfn>
		<dd>
			The element lays out its contents using flex layout. [[!CSS3-FLEXBOX]]

		<dt><dfn>grid</dfn>
		<dd>
			The element lays out its contents using grid layout. [[!CSS3-GRID-LAYOUT]]

		<dt><dfn>ruby</dfn>
		<dd>
			The element lays out its contents using ruby layout. [[!CSS3RUBY]]
	</dl>

	The <<display-outside>> keywords specify the element's <a>outer display type</a>,
	and are defined as follows:

	<dl dfn-type="value" dfn-for="display, <display-outside>">
		<dt><dfn>block</dfn>
		<dd>
			The element generates a <dfn dfn>block-level box</dfn>,
			and participates in a block formatting context.
			Other formatting contexts,
			such as flex formatting contexts,
			may also work with block-level elements. [[!CSS21]]

		<dt><dfn>inline</dfn>
		<dd>
			The element generates an <dfn dfn>inline-level box</dfn>. [[!CSS21]]

		<dt><dfn>run-in</dfn>
		<dd>
			The element generates a <a>run-in box</a>.
			Run-in elements act like inlines or blocks,
			depending on the surrounding elements.
			See [[#run-in]] for details.
	</dl>

	If a <<display-inside>> is specified but <<display-outside>> is omitted,
	the element's <a>outer display type</a> defaults to ''block'',
	except for ''ruby'' it defaults to ''inline''.

	If a <<display-outside>> is specified but <<display-inside>> is omitted,
	the element's <a>inner display type</a> defaults to ''flow''.

	The <dfn value for="display, <display-list-item>">list-item</dfn> keyword
	makes the element generate a principal box of the specified type
	together with a ''::marker'' pseudo-element box
	(see <a href="http://www.w3.org/TR/CSS21/generate.html#lists">CSS 2.1§12.5 Lists</a>).
	If neither ''flow'' nor ''flow-root'' is specified,
	the principal box's <a>inner display type</a> defaults to ''flow''.
	If <<display-outside>> is unspecified,
	the principal box's <a>outer display type</a> defaults to ''block''.

	Issue: Update Lists module to be referenceable here instead.

<h3 id="layout-specific-display">
Layout-Specific Display Types</h3>

	Some layout modes, such as ''table'' and ''ruby'',
	have a complex internal structure,
	with several different roles that their children and descendants can fill.
	This section defines those "internal" 'display' values,
	which only have meaning within a particular layout mode.

	Unless otherwise specified,
	both the <a>inner display type</a> and the <a>outer display type</a>
	of elements using these 'display' values
	are set to the given keyword.

	The <<display-internal>> keywords are defined as follows:

	<dl dfn-type=value dfn-for="display, <display-internal>">
		<dt><dfn>table-row-group</dfn>, <dfn>table-header-group</dfn>, <dfn>table-footer-group</dfn>, <dfn>table-row</dfn>, <dfn>table-cell</dfn>, <dfn>table-column-group</dfn>, <dfn>table-column</dfn>, <dfn>table-caption</dfn>
		<dd>
			The element is an <dfn dfn>internal table element</dfn>,
			and participates in a table layout context. [[!CSS21]]

			''table-cell'' and ''table-caption'' have a ''flow-root'' <a>inner display type</a>.

		<dt><dfn>ruby-base</dfn>, <dfn>ruby-text</dfn>, <dfn>ruby-base-container</dfn>, <dfn>ruby-text-container</dfn>
		<dd>
			The element is an <dfn dfn>internal ruby element</dfn>,
			and participates in a ruby layout context. [[!CSS3RUBY]]

			''ruby-base'' and ''ruby-text'' have a ''flow-root'' <a>inner display type</a>.
	</dl>

	Boxes with layout-specific display types generate anonymous wrapper boxes around themselves
	when placed in an incompatible parent,
	as defined by their respective specifications.

	<div class='example'>
		For example, Table Layout defines that a ''table-cell'' box
		must have a ''table-row'' parent box.

		If it is misparented, like so:

		<pre class="lang-markup">
		&lt;div style="display:block;">
			&lt;div style="display:table-cell">...&lt;/div>
		&lt;/div>
		</pre>

		It will generate wrapper boxes around itself,
		producing a structure like:

		<pre>
		block box
		└anonymous table box
		 └anonymous table-row-group box
		  └anonymous table-row box
		   └table-cell box
		</pre>

		Even if the parent is another <a>internal table element</a>,
		if it's not the <em>correct</em> one,
		wrapper boxes will be generated.
		For example, in the following markup:

		<pre class="lang-markup">
		&lt;div style="display:table;">
			&lt;div style="display:table-row">
				&lt;div style="display:table-cell">...&lt;/div>
			&lt;/div>
		&lt;/div>
		</pre>

		Anonymous wrapper box generation will produce:

		<pre>
		table box
		└anonymous table-row-group box
		 └table-row box
		  └table-cell box
		</pre>

		This "fix-up" ensures that the  Table Layout has a predictable structure to operate on.
	</div>

<h3 id="box-generation">
Box Generation</h3>

	While 'display' can control the <em>types</em> of boxes an element will generate,
	it can also control whether an element will generate any boxes at all.

	Elements with either of these values do not have <a>inner</a> or <a>outer display types</a>,
	because they don't generate any boxes at all.

	The <<display-box>> keywords are defined as follows:

	<dl dfn-type=value dfn-for="display, <display-box>">
		<dt><dfn>contents</dfn>
		<dd>
			The element itself does not generate any boxes,
			but its children and pseudo-elements still generate boxes as normal.
			For the purposes of box generation and layout,
			the element must be treated as if it had been replaced with its children and pseudo-elements in the document tree.

			Issue: ''contents'' currently only has an effect on box generation and layout.
			Other things that care about the document tree are unaffected, like counter scopes.
			Is this what we want?

		<dt><dfn>none</dfn>
		<dd>
			The element and its descendants generates no boxes.

			Advisement: It is recommended that 'box-suppress' be used instead of ''display: none'',
			so that the element's display type is automatically preserved
			for when it's no longer suppressed.
	</dl>

<h3 id='legacy-display'>
Legacy Display Values</h3>

	CSS level 2 conflated the concepts of <a>inner</a> and <a>outer display types</a>,
	so that block-level and inline-level variants of the same layout mode were given separate names.
	Now that 'display' separates those,
	these legacy values can be mapped into the separate concepts they represent.

	The <<display-legacy>> keywords are defined as follows:

	<dl dfn-type=value dfn-for="display, <display-legacy>">
		<dt><dfn>inline-block</dfn>
		<dd>
			Behaves as ''inline flow-root''.

		<dt><dfn>inline-table</dfn>
		<dd>
			Behaves as ''inline table''.

		<dt><dfn>inline-flex</dfn>
		<dd>
			Behaves as ''inline flex''.

		<dt><dfn>inline-grid</dfn>
		<dd>
			Behaves as ''inline grid''.
	</dl>

<h3 id='transformations'>
Automatic Box Type Transformations</h3>

	Some layout effects require <dfn export lt="blockify|blockification">blockification</dfn>
	or <dfn export lt="inlinify|inlinification">inlinification</dfn> of the box type,
	which sets the box’s <a>outer display type</a>, if it is not ''none'' or ''contents'',
	to ''block'' or ''inline'' (respectively).

	<div class='example'>
		Some examples of this include:

		<ul>
			<li>Absolute positioning or floating an element <a>blockifies</a> the box’s display type. [[CSS21]]
			<li>Containment in a <a spec=css-ruby>ruby container</a> <a>inlinifies</a> the box’s display type, as described in [[CSS3RUBY]].
			<li>A parent with a ''grid'' or ''flex'' 'display' value <a>blockifies</a> the box’s display type. [[CSS3-GRID-LAYOUT]] [[CSS3-FLEXBOX]]
		</ul>
	</div>

	If a box with a ''flow'' <a>inner display type</a> is <a>blockified</a>,
	its <a>inner display type</a> becomes ''flow-root''.
	If a box with a ''flow'' <a>inner display type</a> is <a>inlinified</a>,
	it recursively <a>inlinifies</a> all of its in-flow children,
	so that no block-level descendants
	break up the inline formatting context in which it participates.

	The root element’s display type is always <a>blockified</a>.
	Additionally, a 'display' of ''contents'' computes to ''block'' on the root element.


<h2 id='box-suppress'>
Controlling box generation: the 'box-suppress' property</h2>

	''display:none'' was historically used as a "toggle" to switch between displaying an element or not.
	Making this reversible requires either setting up the CSS <a>cascade</a> properly,
	or remembering what the display type was before it was set to ''none''.
	To make this common use-case easier,
	the 'box-suppress' property was defined to do the same thing,
	so that toggling whether or not an element displays
	can now be done without affecting its layout type when it <em>is</em> displayed.

	<pre class="propdef">
	Name: box-suppress
	Value: show | discard | hide
	Initial: show
	Applies to: all elements
	Inherited: no
	Percentages: n/a
	Computed value: see prose
	Media: all
	</pre>

	If the computed value of 'display' is ''none'',
	the computed value of 'box-suppress' is ''discard''.
	Otherwise, the computed value is the specified value.

	<dl dfn-type="value" dfn-for="box-suppress">
		<dt><dfn>show</dfn>
		<dd>
			The element generates boxes as normal,
			per its 'display-*' properties.

		<dt><dfn>discard</dfn>
		<dd>
			The element generates no boxes at all.

		<dt><dfn>hide</dfn>
		<dd>
			The element generates boxes as normal,
			but those boxes do not participate in layout in any way,
			and must not be displayed.

			For the purpose of any layout-related information,
			such as querying for the computed value of the element's 'width' property,
			it must be treated as if it did not generate any boxes.

			Properties that rely on boxes but do not rely on layout,
			such as animations, 'counter-increment', etc.,
			must work as normal on this element and its descendants.

			Issue: This needs more clarity about what "layout-related" and "participates in layout" means.
			Does the box still generate anonymous boxes, etc.?

			Issue: How does this affect speech?  Is that "layout"?
	</dl>

	Issue: We welcome better naming suggestions on this property.


<h2 id='run-in'>
Run-In Layout</h2>

	A <dfn>run-in box</dfn> is a box that <em>merges into</em> a block that comes after it,
	inserting itself at the beginning of that block’s inline-level content.
	This is useful for formatting compact headlines, definitions, and other similar things,
	where the appropriate DOM structure is to have a headline preceding the following prose,
	but the desired display is an inline headline laying out with the text.

	<div class="example">
		For example, dictionary definitions are often formatted so that the word is inline with the definition:

		<pre>
		&lt;dl class='dict'>
			&lt;dt>dictionary
			&lt;dd>a book that lists the words of a language in alphabetical
			    order and gives their meaning, or that gives the equivalent
			    words in a different language.
			&lt;dt>glossary
			&lt;dd>an alphabetical list of terms or words found in or relating
			    to a specific subject, text, or dialect, with explanations; a
			    brief dictionary.
		&lt;/dl>
		&lt;style>
		.dict > dt {
			display: run-in;
		}
		.dict > dt::after {
			content: ": "
		}
		&lt;/style>
		</pre>

		Which is formatted as:

		<pre>
		<b>dictionary:</b> a book that lists the words of a language
		in alphabetical order and explains their meaning.

		<b>glossary:</b> an alphabetical list of terms or words found
		in or relating to a specific subject, text, or dialect,
		with explanations; a brief dictionary.
		</pre>
	</div>

	A <a>run-in box</a> behaves exactly as an <a>inline-level box</a>, except:

	<ul>
		<li>
			If a <a>run-in sequence</a> is immediately followed by a block box
			that does not establish a new <a>formatting context</a>,
			it is inserted as direct children of the block box
			after its ''::marker'' pseudo-element's boxes (if any),
			but preceding any other boxes generates by the contents of the block
			(including the box generated by the ''::before'' pseudo-element, if any).

			The reparented content is then formatted as if originally parented there.
			<span class='note'>Note that only layout is affected, not inheritance,
			because property inheritance for non-anonymous boxes is based only on the element tree.</span>

		<li>
			Otherwise,
			an anonymous block box is generated around the <a>run-in sequence</a>
			and all immediately following inline-level content
			(up to, but not including, the next <a>run-in sequence</a>, if any).

		<li>
			A <a>run-in box</a> with ''display: flow'' <a>inlinifies</a> its contents.
	</ul>

	A <dfn>run-in sequence</dfn> is a maximal sequence of consecutive sibling <a>run-in boxes</a>
	and intervening white space and/or out-of-flow boxes.

	Issue: Should out-of-flow elements get reparented, left behind, or break apart the sequence?
	<a href="http://lists.w3.org/Archives/Public/www-style/2012Aug/0257.html">See thread.</a>

	Note: This run-in model is slightly different from the one proposed in earlier revisions of [[!CSS21]].

<h2 id='element-box-fragment'>
Appendix A: Elements, Boxes, and Fragments</h2>

	CSS operates on several different types of objects,
	depending on the stage of processing and what is being done:
	the <a>element</a>, the <a>box</a>, and the <a>fragment</a>.

	Note: Many of the CSS specs were written before this terminology was ironed out,
	or refer to things incorrectly,
	so view older specs with caution when they're using these terms.
	It should be possible to infer from context which term they really mean.
	Please report errors in specs when you find them,
	so they can be corrected.

	An <dfn>element</dfn> is an object in the DOM tree returned by the host element.
	The purpose of an <a>element</a> is to receive styling,
	so the multiple declarations from the document's style sheets
	are converted into values for each property on each element.
	(The DOM tree also contains text,
	which is identical to <a>elements</a>
	except that it can't be styled directly,
	only through inheritance.)

	<a>Elements</a> generate <a>boxes</a>.
	Typically, an <a>element</a> generates a single <a>box</a>.
	Some properties (such as ''display:none'') cause an <a>element</a> and/or its descendants to not generate any <a>boxes</a> at all.
	Some properties (such as ''columns: 2'') cause an <a>element</a> to generate multiple <a>boxes</a>s.
	Some combinations of properties (such as an element with ''display:table-cell'' and a parent element with anything but ''display:table-row'')
	trigger the creation of <a>anonymous boxes</a> to keep the <a>box tree</a> reasonable.

	A <dfn>box</dfn> is an object generated from an <a>element</a> according to the 'display' property
	and other layout-affecting properties,
	organized into a <dfn>box tree</dfn>.
	The purpose of a <a>box</a> is to organize the document into a structure that is suitable for layout.
	<a>Boxes</a> have the same styles as their generating <a>element</a>, unless otherwise indicated.
	They're referred by their type, typically determined by the 'display' value--
	a <a>box</a> generated by an element with ''display: block'' is called a “block box” or just a “block”.

	An <dfn>anonymous box</dfn> is generated in certain circumstances
	where a type of <a>box</a> (such as a table cell box)
	requires a particular type of parent box (such as a table row box)
	but the document structure is not written to produce that--
	<a>anonymous boxes</a> are then generated between the parent and child to provide the required structures.
	Anonymous boxes are styled as if they inherited from their nearest non-anonymous parent <a>box</a>,
	unless otherwise specified.

	The process of layout generates <a>fragments</a> from <a>boxes</a>.

	A <dfn>fragment</dfn> is an object representing the result of layout,
	organized into a <dfn>fragment tree</dfn>.
	<a>Fragments</a> have a size and position,
	and the same styles as their generating <a>boxes</a>
	unless otherwise specified.



<h2 id='glossary'>
Appendix B: Glossary</h2>

	The following terms are defined here for convenience:

	<dl export>
		<dt><dfn lt="inline-level|inline-level content">inline-level</dfn>
		<dd>
			Content that participates in inline layout.
			Specifically, inline-level boxes and text.

		<dt><dfn lt="block-level|block-level content">block-level</dfn>
		<dd>
			Content that participates in block layout.
			Specifically, block-level boxes.

		<dt><dfn lt="inline|inline box">inline</dfn>
		<dd>
			A non-replaced <a>inline-level</a> box whose 'display' is ''flow''.
			The contents of an inline box participate in the same inline formatting context as the inline box itself.

		<dt><dfn lt="atomic inline|atomic inline box">atomic inline</dfn>
		<dd>
			An inline-level box that is replaced or that establishes a new formatting context.
			(An inline-level box whose 'display' is not ''flow'' establishes a new formatting context of the specified type.)

		<dt><dfn lt="block container|block container box">block container</dfn>
		<dd>
			A box whose contents participate in a block formatting context,
			i.e. one whose computed 'display' value is ''block''.

		<dt><dfn>block box</dfn>
		<dd>
			A <a>block-level box</a> that is a <a>block container</a>.

		<dt><dfn>block</dfn>
		<dd>
			Used as a shorthand for <a>block box</a>, <a>block-level box</a>, or <a>block container box</a>,
			where unambiguous.

		<dt><dfn>containing block</dfn>
		<dd>
			A rectangle that forms the basis of sizing and positioning
			for the boxes associated with it
			(usually the children of the box that generated it).
			Notably, a containing block is <em>not a box</em>
			(it is a rectangle),
			however it is often derived from the dimensions of a box.
			If properties of a containing block are referenced,
			they reference the values on the box that generated the containing block.
			(For the <a>initial containing block</a>, the values are taken from the root element.)
			See [[CSS21]] <a href="http://www.w3.org/TR/CSS21/visuren.html#containing-block">Section 9.1.2</a>
			and <a href="http://www.w3.org/TR/CSS21/visudet.html#containing-block-details">Section 10.1</a> for details.

		<dt><dfn>initial containing block</dfn>
		<dd>
			The <a>containing block</a> of the root element.
			See <a href="http://www.w3.org/TR/CSS21/visudet.html#containing-block-details">CSS2.1&sect;10.1</a> for continuous media;
			and [[!CSS3PAGE]] for paged media.

		<dt><dfn>formatting context</dfn>
		<dd>
			The thing that makes CSS do the layouts.

			Issue: wordsmith this.

		<dt><dfn>block formatting context</dfn>
		<dd>
			Block and inline formatting contexts are defined in CSS 2.1 Section 9.4.
	</dl>

	See [[!CSS21]] <a href="http://www.w3.org/TR/CSS21/visuren.html">Chapter 9</a> for a fuller definition of these terms.

<h2 class=no-num id="acknowledgments">
Acknowledgments</h2>

	We would like to thank the many people who have attempted to separate out the disparate details of box generation over the years,
	most particularly Bert Bos,
	whose last attempt with 'display-model' and 'display-role' didn't get anywhere,
	but primed us for the current spec,
	and Anton Prowse,
	whose relentless assault on CSS2.1 Chapter 9 forced some order out of the chaos.

	We would also like to thank the many JavaScript libraries such as jQuery
	which have hacked around the "what 'display' should I give it when you call .show()?" problem,
	making it extremely clear that something needed to be done on our part.

<h2 class=no-num id="changes">
Changes</h2>

	Changes since the <a href="http://www.w3.org/TR/2014/WD-css-display-3-20140220/">20 Feburary 2014 Working Draft</a> include:

	<ul>
		<li>Removed <css>display-inside</css>, <css>display-outside</css>, and <css>display-extras</css>,
			in favor of just making 'display' multi-value.
		<li>Renamed <css>display-box</css> to 'box-suppress'.
		<li>Moved the ''contents'' value from 'box-suppress' to 'display'.
		<li>Added ''hide'' value to 'box-suppress'.
		<li>Added <a>blockification</a> and <a>inlinification</a> rules.
		<li>Added ''display: run-in'' and defined its layout in [[#run-in]].
		<li>Various editorial improvements.
		<li>Added [[#glossary]], incorporating key CSS2.1 terms.
	</ul>
