<h1>CSS Box Alignment Module Level 3</h1>

<pre class='metadata'>
Shortname: css-align
Level: 3
Group: csswg
Status: WD
Date: 2014-12-18
ED: http://dev.w3.org/csswg/css-align/
TR: http://www.w3.org/TR/css-align-3/
Editor: Elika J. Etemad, Invited Expert, http://fantasai.inkedblade.net/contact
Editor: Tab Atkins Jr., Google, http://xanthir.com/contact/
Previous Version: http://www.w3.org/TR/2013/WD-css3-align-20130514/
Previous Version: http://www.w3.org/TR/2012/WD-css3-align-20120612/
Abstract: This module contains the features of <a href="http://www.w3.org/TR/CSS/">CSS</a> relating to the alignment of boxes within their containers in the various CSS box layout models: block layout, table layout, flex layout, and grid layout. (The alignment of text and inline-level content is defined in [[CSS3TEXT]] and [[CSS3LINE]].)
Issue Tracking: Tracker http://www.w3.org/Style/CSS/Tracker/products/39
Link Defaults: selectors-3 (dfn) first formatted line, css-flexbox-1 (dfn) flex line, css-multicol-1 (dfn) multi-column element, css-fonts-3 (dfn) first available font, css21 (property) max-width/max-height/min-width/min-height, css-writing-modes-3 (dfn) dominant baseline, css-position-3 (property) left, css-cascade-3 (value) initial
Ignored Terms: table cell, stretch
At Risk: ''last-baseline''
</pre>

<style type="text/css">
	.issue th:first-child { text-align: left !important; }
	[rowspan] > img { float: right; }
	[rowspan] { vertical-align: middle; }
	table small { display: block; }
</style>

<h2 id="intro">
Introduction</h2>

	<em>This section is not normative.</em>

	CSS Levels 1 and 2 allowed for the alignment of text via 'text-align' and
	the alignment of blocks by balancing ''margin/auto'' margins. However, except in
	table cells, vertical alignment was not possible. As CSS3 adds further
	capabilities, the ability to align boxes in various dimensions becomes more
	critical. This module attempts to create a cohesive and common box alignment
	model to share among all of CSS.

	Note: The alignment of text and inline-level content is defined in [[CSS3TEXT]] and [[CSS3LINE]].

	Inspiration for this document:

	<ul>
		<li><a href="http://wiki.csswg.org/ideas/centering#alignment-property">summary of a discussion for implementing &lt;CENTER&gt;</a>
		<li><a href="https://lists.w3.org/Archives/Member/w3c-css-wg/2008AprJun/0015.html">Minutes from March 2008 F2F</a>
		<li><a href="http://lists.w3.org/Archives/Public/www-style/2012Feb/0743.html">fantasai's attempt to merge all alignment properties</a>
	</ul>

<h3 id="placement">
Module interactions</h3>

	This module adds some new alignment capabilities to the block layout
	model described in [[!CSS21]] chapters 9 and 10 and defines the interaction
	of these properties with the alignment of table cell content using
	'vertical-align', as defined in [[!CSS21]] chapter 17.

	The interaction of these properties with
	Grid Layout [[!CSS3-GRID-LAYOUT]]
	and Flexible Box Layout [[!CSS3-FLEXBOX]]
	is defined in their respective modules.
	The property definitions here supersede those in [[!CSS3-FLEXBOX]]
	(which have a smaller, earlier subset of permissible values).

	No properties in this module apply to the <code>::first-line</code> or
	<code>::first-letter</code> pseudo-elements.

<h3 id="values">
Values</h3>

	This specification follows the
	<a href="http://www.w3.org/TR/CSS21/about.html#property-defs">CSS property
	definition conventions</a> from [[!CSS21]]. Value types not defined in
	this specification are defined in CSS Level 2 Revision 1 [[!CSS21]].
	Other CSS modules may expand the definitions of these value types: for
	example [[CSS3VAL]], when combined with this module, adds the
	''initial'' keyword as a possible property value.

	In addition to the property-specific values listed in their definitions,
	all properties defined in this specification also accept the
	<a href="http://www.w3.org/TR/CSS21/cascade.html#value-def-inherit">inherit</a>
	keyword as their property value. For readability it has not been repeated
	explicitly.


<h2 id="overview">
Overview of Alignment Properties</h2>

	The <dfn>box alignment properties</dfn> in CSS are a set of 6 properties
	that control alignment of boxes within other boxes.
	They can be described along two axises:

	<ul>
		<li>which dimension they apply to (inline vs. stacking), and
		<li>whether they control the position of the box within its parent, or the box's content within itself.
	</ul>

	Note: This specification uses the terms “justify” and “align” to distinguish
	between alignment in the inline and stacking dimensions, respectively.
	The choice is somewhat arbitrary, but having the two terms allows for
	a consistent naming scheme that works across all of CSS's layout models.

	The following table summarizes the <a>box alignment properties</a>
	and the display types they can apply to.

	<table class=data>
	<colgroup span=1></colgroup>
	<colgroup span=2></colgroup>
	<colgroup span=1></colgroup>
	<thead>
		<tr>
			<th>Common
			<th>Axis
			<th>Aligns
			<th>Applies to
	<tbody>
		<tr>
			<th>'justify-content'
			<td>inline
			<td rowspan=2>
				<img src="images/content-example.svg" width=106 height=106 alt="">
				content within element
				<small>(effectively adjusts padding)</small>
			<td>block containers, <a>flex containers</a>, and <a>grid containers</a>
		<tr>
			<th>'align-content'
			<td>stacking
			<td>block containers, <a>flex containers</a>, and <a>grid containers</a>
	<tbody>
		<tr>
			<th>'justify-self'
			<td>inline
			<td rowspan=2>
				<img src="images/self-example.svg" width=106 height=106 alt="">
				element within parent
				<small>(effectively adjusts margins)</small>
			<td>block-level elements and <a>grid items</a>
		<tr>
			<th>'align-self'
			<td>stacking
			<td><a>flex items</a> and <a>grid items</a>
	<tbody>
		<tr>
			<th>'justify-items'
			<td>inline
			<td rowspan=2>
				<img src="images/items-example.svg" width=106 height=106 alt="">
				items inside element
				<small>(controls child items&rsquo; ''align/justify-self: auto'')</small>
			<td><a>grid containers</a>
		<tr>
			<th>'align-items'
			<td>stacking
			<td><a>flex containers</a> and <a>grid containers</a>
	</table>

	Note: The '*-items' values don't affect the element itself.
	When set on a flex container or grid container,
	they specify the interpretation of any ''*-self: auto'' used on the items in the container element.

<h2 id='alignment-values'>
Alignment Values</h2>

	All of the alignment properties use a common set of values,
	defined below.

	<dl>
		<dt><dfn export>alignment subject</dfn>
		<dd>
			The <a>alignment subject</a> is the thing or things being aligned by the property.
			For 'justify-self' and 'align-self',
			the <a>alignment subject</a> is the margin box of the box the property is set on.
			For 'justify-content' and 'align-content',
			the <a>alignment subject</a> is defined by the layout mode.

		<dt><dfn export>alignment container</dfn>
		<dd>
			The <a>alignment container</a> is the rectangle that the <a>alignment subject</a> is aligned within.
			This is defined by the layout mode,
			but is usually the <a>alignment subject</a>’s containing block.
	</dl>

<h3 id='positional-values'>
Positional Alignment: the ''center'', ''start'', ''end'', ''self-start'', ''self-end'', ''flex-start'', ''flex-end'', ''left'', and ''right'' keywords</h3>

	The positional alignment keywords specify a position for an <a>alignment subject</a>
	with respect to its <a>alignment container</a>.

	The <<self-position>> set of values is used by 'justify-self' and 'align-self'
	to align the box within its <a>alignment container</a>,
	and also by 'justify-items' and 'align-items'
	(to specify default values for 'justify-self' and 'align-self').
	The <<content-position>> set of values is used by 'justify-content' and 'align-content'
	to align the box's contents within itself.

	<pre class='prod'>
		<dfn>&lt;self-position></dfn> = center | start | end | self-start | self-end |
		                   flex-start | flex-end | left | right;
		<dfn>&lt;content-position></dfn> = center | start | end | flex-start | flex-end | left | right;
	</pre>


	Values have the following meanings:

	<dl dfn-type="value">
		<dt><dfn for="<self-position>, <content-position>">center</dfn> <small>(self, content)</small>
		<dd>Centers the <a>alignment subject</a> within its <a>alignment container</a>.

		<dt><dfn for="<self-position>, <content-position>">start</dfn> <small>(self, content)</small>
		<dd>Aligns the <a>alignment subject</a> to be flush with the <a>alignment container</a>’s start edge.

		<dt><dfn for="<self-position>, <content-position>">end</dfn> <small>(self, content)</small>
		<dd>Aligns the <a>alignment subject</a> to be flush with the <a>alignment container</a>’s end edge.

		<dt><dfn for="<self-position>">self-start</dfn> <small>(self)</small>
		<dd>Aligns the <a>alignment subject</a> to be flush with the edge of the <a>alignment container</a>
			corresponding to the <a>alignment subject</a>’s start side.

		<dt><dfn for="<self-position>">self-end</dfn> <small>(self)</small>
		<dd>Aligns the <a>alignment subject</a> to be flush with the edge of the <a>alignment container</a>
			corresponding to the <a>alignment subject</a>’s end side.

		<dt><dfn for="<self-position>, <content-position>">flex-start</dfn> <small>(self, content)</small>
		<dd><strong>Only used in flex layout.</strong> [[!CSS3-FLEXBOX]]
			Aligns the <a>alignment subject</a> to be flush with the edge of the <a>alignment container</a>
			corresponding to the <a>flex container</a>’s main-start or cross-start side, as appropriate.
			When used on boxes that are not children of a <a>flex container</a>,
			this value computes to ''start''.

		<dt><dfn for="<self-position>, <content-position>">flex-end</dfn> <small>(self, content)</small>
		<dd><strong>Only used in flex layout.</strong>
			Aligns the <a>alignment subject</a> to be flush with the edge of the <a>alignment container</a>
			corresponding to the <a>flex container</a>’s main-end or cross-end side, as appropriate.
			When used on boxes that are not children of a <a>flex container</a>,
			this value computes to ''end''.

		<dt><dfn for="<self-position>, <content-position>">left</dfn> <small>(self, content)</small>
		<dd>Aligns the <a>alignment subject</a> to be flush with the <a>alignment container</a>’s <a href="http://www.w3.org/TR/css3-writing-modes/#line-left">line-left</a> edge.
			If the property's axis is not parallel with the inline axis,
			this value computes to ''start''.

		<dt><dfn for="<self-position>, <content-position>">right</dfn> <small>(self, content)</small>
		<dd>Aligns the <a>alignment subject</a> to be flush with the <a>alignment container</a>’s <a href="http://www.w3.org/TR/css3-writing-modes/#line-right">line-right</a> edge.
			If the property's axis is not parallel with the inline axis,
			this value computes to ''start''.
	</dl>

	<p class='issue'>
		Add example images.

<h3 id='baseline'>
Baseline Alignment: the ''baseline'' and ''last-baseline'' keywords</h3>

	<dfn>Baseline alignment</dfn> is a form of positional alignment
	that aligns multiple <a>alignment subjects</a> within a <a>shared alignment context</a> (such as cells within a row or column)
	by matching up their <a>alignment baselines</a>.

	The baseline alignment keywords are:

	<pre class='prod'>
		<dfn>&lt;baseline-position></dfn> = baseline | last-baseline
	</pre>

	and are defined below:

	<dl dfn-type=value dfn-for="justify-content, justify-self, justify-items, align-content, align-self, align-items, <baseline-position>">
		<dt><dfn>baseline</dfn>
		<dd>
			Indicates <dfn dfn>first-baseline alignment</dfn>:
			aligns one of the box's <a>first baselines</a>
			with the corresponding <a>first baselines</a>
			of all the boxes in its <a>baseline-sharing group</a>.

			If the <a>alignment subject</a>’s position is not fully determined by <a>baseline alignment</a>,
			the content is ''self-start''-aligned insofar as possible while preserving the baseline alignment.
			(Content that has no <a>first baselines</a> is thus start-aligned.)

		<dt><dfn>last-baseline</dfn>
		<dd>
			Indicates <dfn dfn>last-baseline alignment</dfn>:
			aligns one of the box's <a>last baselines</a>
			with the corresponding <a>last baselines</a>
			of all the boxes in its <a>baseline-sharing group</a>.

			If the <a>alignment subject</a>’s position is not fully determined by <a>baseline alignment</a>,
			the content is ''self-end''-aligned insofar as possible while preserving the baseline alignment.
			(Content that has no <a>last baselines</a> is thus end-aligned.)
	</dl>

	These values give a box a <dfn>baseline alignment preference</dfn>:
	either "first" or "last", respectively.

	When specified for 'align-content'/'justify-content',
	these values trigger <a>baseline content-alignment</a>,
	shifting the content of the box within the box,
	and may also affect the sizing of the box itself.
	See [[#baseline-align-content]].

	When specified for 'align-self'/'justify-self',
	these values trigger <a>baseline self-alignment</a>,
	shifting the entire box within its container,
	which may affect the sizing of its container.
	See [[#baseline-align-self]].

	If both <a>baseline content-alignment</a> <em>and</em> <a>baseline self-alignment</a> are specified in the same axis on the same box,
	only <a>baseline self-alignment</a> is honored in that axis;
	the content-alignment in that axis must be treated as ''self-start''.

	Issue: The previous paragraph is fairly arbitrary.
	Need some experience to make sure it's the correct choice out of the two possibilities.

	<p class='issue'>Add example images here.

	Note: The 'vertical-align' property will also need a ''first-baseline'' value
	because per CSS2.1 for inline blocks, ''baseline'' is equivalent to ''last-baseline''.


<h3 id='distribution-values'>
Distributed Alignment: the ''<content-distribution>/stretch'', ''space-between'', ''space-around'', and ''space-evenly'' keywords</h3>

	The distribution values are used by 'justify-content' and 'align-content'
	to distribute the <a>alignment subjects</a>
	evenly between the start and end edges of the <a>alignment container</a>.
	When the <a>alignment subjects</a> cannot be distributed in this way,
	they behave as their <dfn export>fallback alignment</dfn>.
	Each distribution value has an associated <<content-position>> as a <a>fallback alignment</a>,
	but one can alternatively be explicitly specified in the property.

	<pre class='prod'> <dfn>&lt;content-distribution></dfn> = space-between | space-around | space-evenly | stretch</pre>

	<dl dfn-type="value" dfn-for="<content-distribution>">
		<dt><dfn>space-between</dfn>
		<dd>
			The <a>alignment subjects</a> are evenly distributed in the <a>alignment container</a>.
			The first <a>alignment subject</a> is placed flush with the start edge of the <a>alignment container</a>,
			the last <a>alignment subject</a> is placed flush with the end edge of the <a>alignment container</a>,
			and the remaining <a>alignment subjects</a> are distributed so that the spacing between any two adjacent <a>alignment subjects</a> is the same.
			Unless otherwise specified,
			this value falls back to ''start''.

		<dt><dfn>space-around</dfn>
		<dd>
			The <a>alignment subjects</a> are evenly distributed in the <a>alignment container</a>,
			with a half-size space on either end.
			The <a>alignment subjects</a> are distributed so that the spacing between any two adjacent <a>alignment subjects</a> is the same,
			and the spacing before the first and after the last <a>alignment subject</a> is half the size of the other spacing.
			Unless otherwise specified,
			this value falls back to ''center''.

		<dt><dfn>space-evenly</dfn>
		<dd>
			The <a>alignment subjects</a> are evenly distributed in the <a>alignment container</a>,
			with a full-size space on either end.
			The <a>alignment subjects</a> are distributed so that the spacing between any two adjacent <a>alignment subjects</a>,
			before the first <a>alignment subject</a>,
			and after the last <a>alignment subject</a>
			is the same.
			Unless otherwise specified,
			this value falls back to ''center''.

		<dt><dfn>stretch</dfn>
		<dd>
			If the combined size of the <a>alignment subjects</a> is less than the size of the <a>alignment container</a>,
			any ''width/auto''-sized <a>alignment subjects</a> have their size increased equally (not proportionally),
			while still respecting the constraints imposed by 'max-height'/'max-width',
			so that the combined size exactly fills the <a>alignment container</a>.

			Unless otherwise specified,
			this value falls back to ''flex-start''.
			<span class='note'>(For layout modes other than flex layout, ''flex-start'' is identical to ''start''.)</span>

			Issue: Should this value allow a fallback alignment on 'align-self' and 'justify-self',
			like it does on 'align-content' and 'justify-content'?
	</dl>

	<p class='issue'>
		Add even more example images.

<h3 id='overflow-values'>
Overflow Alignment: the ''safe'' and ''true'' keywords</h3>

	When the <a>alignment subject</a> is larger than the <a>alignment container</a>,
	it will overflow.
	Some alignment modes, if honored in this situation,
	may cause data loss:
	for example, if the contents of a sidebar are centered,
	when they overflow they may send part of their boxes past the viewport's start edge,
	which can't be scrolled to.

	To help combat this problem,
	an <dfn export>overflow alignment</dfn> mode can be explicitly specified.
	"True" alignment honors the specified alignment mode in overflow situations, even if it causes data loss,
	while "safe" alignment changes the alignment mode in overflow situations in an attempt to avoid data loss.

	If the <a>overflow alignment</a> isn't explicitly specified,
	the default <a>overflow alignment</a> is determined by the layout mode.
	Document-centric layout modes, such as block layout, default to "safe" <a>overflow alignment</a>,
	while design-centric layout modes, such as flex layout, default to "true" <a>overflow alignment</a>.

	<pre class='prod'><dfn>&lt;overflow-position></dfn> = true | safe</pre>

	<dl dfn-type="value" dfn-for="<overflow-position>">
		<dt><dfn>safe</dfn>
		<dd>
			If the size of the <a>alignment subject</a> overflows the <a>alignment container</a>,
			the <a>alignment subject</a> is instead aligned as if the alignment mode were ''start''.

		<dt><dfn>true</dfn>
		<dd>
			Regardless of the relative sizes of the <a>alignment subject</a> and <a>alignment container</a>,
			the given alignment value is honored.
	</dl>

	<p class='issue'>
		Transplant example 10 from flexbox.

<!--
                   ██████   ███████  ██    ██ ████████ ████████ ██    ██ ████████
 ██   ██          ██    ██ ██     ██ ███   ██    ██    ██       ███   ██    ██
  ██ ██           ██       ██     ██ ████  ██    ██    ██       ████  ██    ██
█████████ ███████ ██       ██     ██ ██ ██ ██    ██    ██████   ██ ██ ██    ██
  ██ ██           ██       ██     ██ ██  ████    ██    ██       ██  ████    ██
 ██   ██          ██    ██ ██     ██ ██   ███    ██    ██       ██   ███    ██
                   ██████   ███████  ██    ██    ██    ████████ ██    ██    ██
-->

<h2 id='content-distribution'>
Content Distribution: the 'justify-content' and 'align-content' properties</h2>

	The <dfn export>content distribution properties</dfn> 'justify-content' and 'align-content'
	control alignment of the box's content within the box.

	<div class="figure">
		<img alt="Diagram showing that the alignment of the content within the element is affected." src="images/content-example.svg" width=212 height=212>
	</div>

	<pre class="propdef">
	Name: justify-content, align-content
	Value: auto | <<baseline-position>> |  <<content-distribution>> || [ <<overflow-position>>? && <<content-position>> ]
	Initial: auto
	Applies to: block containers, flex containers, and grid containers
	Inherited: no
	Percentages: n/a
	Media: visual
	Computed value: specified value, except for ''justify-content/auto'' (see prose)
	Animatable: no
	</pre>

	Aligns the contents of the box as a whole along the box's inline/row/main axis.
	Values other than <dfn value for="justify-content, align-content">auto</dfn> are defined in [[#alignment-values]], above.
	If both a <<content-distribution>> and <<content-position>> are given,
	the <<content-position>> provides an explicit <a>fallback alignment</a>.

	<hr>

	<dl>
		<dt>Block Containers:
		<dd>
			The <a>alignment container</a> is the <a>block container</a>’s content box.
			The <a>alignment subject</a> is the entire contents of the block, as a unit.

			The 'align-content' property applies along the <a>block axis</a>,
			but if a <<content-distribution>> is specified
			the <a>fallback alignment</a> is used instead.
			The 'justify-content' property does not apply to and has no effect on block containers.

			All values other than ''justify-content/auto'' force the block container to establish a new formatting context.
			For table cells, the behavior of the ''justify-content/auto'' depends on the computed value of 'vertical-align':
			''vertical-align/top'' makes it behave as ''start'',
			''vertical-align/middle'' makes it behave as ''center'',
			''vertical-align/bottom'' makes it behave as ''end'',
			and all other values make it behave as ''baseline''.
			''justify-content/auto'' otherwise behaves as ''start''.

		<dt>Multicol Layout:
		<dd>
			The <a>alignment container</a> is the <a>multi-column element</a>’s content box.
			The <a>alignment subject</a> is the column boxes, as a unit.

			The 'align-content' property applies along the <a>block axis</a>,
			but if a <<content-distribution>> is specified
			the <a>fallback alignment</a> is used instead.
			The 'justify-content' property does not apply to and has no effect on multi-column elements.

			''justify-content/auto'' behaves as ''start''.

		<dt>Flex Containers:
		<dd>
			''justify-content/auto'' computes to ''<content-distribution>/stretch''.

			The <a>alignment container</a> is the <a>flex container</a>’s content box.
			For 'justify-content', the <a>alignment subjects</a> are the <a>flex items</a> in each <a>flex line</a>;
			for 'align-content', the <a>alignment subjects</a> are the <a>flex lines</a>.

			The 'align-content' property applies along the <a>cross axis</a>.

			The 'justify-content' property applies along the <a>main axis</a>,
			but since flexing in the <a>main axis</a> is controlled by 'flex',
			''<content-distribution>/stretch'' computes to ''flex-start''.

			See [[!CSS3-FLEXBOX]] for details.

		<dt>Grid Containers:
		<dd>
			''justify-content/auto'' computes to ''start''.

			The <a>alignment container</a> is the <a>grid container</a>’s content box.
			The <a>alignment subjects</a> are the <a>grid tracks</a>.

			The 'align-content' property applies along the <a lt="block axis">block (column) axis</a>,
			aligning the <a>grid rows</a>.
			The 'justify-content' property applies along the <a lt="inline axis">inline (row) axis</a>,
			aligning the <a>grid columns</a>.

			See [[!CSS3-GRID-LAYOUT]] for details.
	</dl>

<h3 id="baseline-align-content">
Baseline Content-Alignment</h3>

	The content of boxes participating in row-like layout contexts (<a>shared alignment contexts</a>)
	can be baseline-aligned to each other.
	This effectively increases the padding on the box
	to align the <a>alignment baseline</a> of its contents
	with that of other baseline-aligned boxes in its <a lt="baseline-sharing group">group</a>.

	The set of boxes that participate in <dfn export lt="baseline content-alignment|first-baseline content-alignment|last-baseline content-alignment">baseline content-alignment</dfn>
	depends on the layout model:

	<dl>
		<dt>Table Cells:
		<dd>
			A <a>table cell</a> participates in first (last) <a>baseline content-alignment</a>
			in either its row or column (whichever matches its <a>inline axis</a>)
			if its computed 'align-content' is ''baseline'' (''last-baseline'').

		<dt>Flex Items:
		<dd>
			A <a>flex item</a> participates in first (last) <a>baseline content-alignment</a>
			in its flex line if
			its computed 'align-content' is ''baseline'' (''last-baseline'')
			and its computed 'align-self' is ''align-self/stretch'' or ''start'' (''end'').

		<dt>Grid Items:
		<dd>
			A <a>grid item</a> participates in first (last) <a>baseline content-alignment</a>
			in either its row or column (whichever matches its <a>inline axis</a>)
			if its computed 'align-content' is ''baseline'' (''last-baseline''),
			and its computed 'align-self' or 'justify-self' (whichever affects its <a>block axis</a>) is ''justify-self/stretch'' or ''start'' (''end'').
	</dl>

	If a box spans multiple <a>shared alignment contexts</a>,
	it participates in first (last) <a>baseline content-alignment</a>
	within its start-most (end-most) <a>shared alignment context</a> along that axis.

	When a box participates in first (last) <a>baseline content-alignment</a>
	its <a>alignment subject</a> is aligned to the start (end) edge of its <a>alignment container</a>
	and the minimum necessary extra space is added between its start (end) edge and the <a>alignment subject</a>
	to match its <a>alignment baseline</a> in that axis up to that of its <a>baseline-sharing group</a>.
	See [[#align-by-baseline]].
	This increases the intrinsic size of the box.

	ISSUE: Make that last paragraph more readable.

<h3 id="overflow-scroll-position">
Overflow and Scroll Positions</h3>

	The <a>content distribution properties</a> also affect the initial scroll position,
	setting it to display the appropriate portion of the scrollable area.
	In other words,
	the scrollable area is aligned relative to the viewport
	as specified by the <a>content distribution property</a>.

	<div class='example'>
		For example,
		if a scrollable flex container is set to ''justify-content: flex-end''
		(or ''justify-content: flex-start'' with ''flex-flow: row-reverse''),
		it will be initially displayed scrolled all the way to the main-end edge of the scrollable area,
		and its content will overflow its main-start edge.
	</div>

	Issue: This needs to be integrated with overflow-anchor, when the property exists,
	so that you get the same behavior whether an elements *starts out* overflowing,
	or is filled element-by-element.

<!--
                   ██████  ████████ ██       ████████
 ██   ██          ██    ██ ██       ██       ██
  ██ ██           ██       ██       ██       ██
█████████ ███████  ██████  ██████   ██       ██████
  ██ ██                 ██ ██       ██       ██
 ██   ██          ██    ██ ██       ██       ██
                   ██████  ████████ ████████ ██
-->

<h2 id='self-alignment'>
Self-Alignment: Aligning the Box within its Parent</h2>

	The 'justify-self' and 'align-self' properties control alignment of the box within its containing block.

	<div class="figure">
		<img alt="Diagram showing that the alignment of the element within its containing block is affected." src="images/self-example.svg" width=212 height=212>
	</div>

<h3 id='justify-self-property'>
Inline/Main-Axis Alignment: the 'justify-self' property</h3>

	<pre class="propdef">
	Name: justify-self
	Value: auto | stretch | <<baseline-position>> | [ <<overflow-position>>? && <<self-position>> ]
	Initial: auto
	Applies to: block-level boxes, absolutely-positioned boxes, and grid items
	Inherited: no
	Percentages: n/a
	Media: visual
	Computed value: specified value, except for ''justify-self/auto'' (see prose)
	Animatable: no
	</pre>

	Justifies the box within its parent along the inline/row/main axis:
	the box's outer edges are aligned within its <a>alignment container</a>
	<a href="#alignment-values">as described by its alignment value</a>.

	The <dfn value for="justify-self, align-self">auto</dfn> keyword computes to
	itself on absolutely-positioned elements,
	and to the computed value of 'justify-items' on the parent
	(minus any ''legacy'' keywords) on all other boxes,
	or ''start'' if the box has no parent.
	Its behavior depends on the layout model, as described below.

	When the box’s computed 'width'/'height' (as appropriate to the axis) is ''width/auto''
	and neither of its margins (in the appropriate axis) are ''margin/auto'',
	the <dfn for="justify-self, align-self">stretch</dfn> keyword
	sets the box’s used size to the length necessary to make its outer size
	as close to filling the <a>alignment container</a> as possible
	while still respecting the constraints imposed by 'min-height'/'min-width'/'max-height'/'max-width'.
	Unless otherwise specified, this value falls back to ''flex-start''.

	All other values are as defined in [[#alignment-values]], above.

	<hr>

	<dl>
		<dt>Block-level Boxes:
		<dd>
			The 'justify-self' property applies along its containing block's <a>inline axis</a>.

			The <a>alignment container</a> is the block's containing block
			except that for block-level elements that establish a block formatting context
			and are placed next to a float,
			the <a>alignment container</a> is reduced by the space taken up by the float.
			(Note: This is the legacy behavior of HTML <code>align</code>.)
			The <a>alignment subject</a> is the block's margin box.

			The default <a>overflow alignment</a> is ''safe''.
			In terms of CSS2.1 block-level formatting [[!CSS21]],
			the rules for "over-constrained" computations in <a href="http://www.w3.org/TR/CSS21/visudet.html#blockwidth">section 10.3.3</a>
			are ignored in favor of alignment as specified here
			and the used value of the offset properties are not adjusted to correct for the over-constraint.

			This property does not apply to floats.


		<dt>Absolutely-positioned Boxes:
		<dd>
			The 'justify-self' property applies along its containing block's <a>inline axis</a>.

			If either margin in this dimension is ''margin/auto'',
			or either offset property in this dimension is ''top/auto'',
			'justify-self' has no effect.
			Otherwise, its effects are defined below.

			The ''justify-self/auto'' keyword behaves as ''start'' on replaced absolutely-positioned boxes,
			and behaves as ''justify-self/stretch'' on all other absolutely-positioned boxes.
			(This is because CSS 2.1 does not stretch replaced elements to fit into fixed offsets.)

			Values other than ''justify-self/stretch'' cause <a href="http://www.w3.org/TR/CSS21/visudet.html#abs-non-replaced-width">non-replaced absolutely-positioned boxes</a>
			to use shrink-to-fit sizing for calculating ''width/auto'' measures.

			The <a>alignment container</a> is the box's containing block
			as modified by the offset properties ('top'/'right'/'bottom'/'left').
			The <a>alignment subject</a> is the box's margin box.

			The default <a>overflow alignment</a> is ''safe''.
			In terms of CSS2.1 formatting [[!CSS21]],
			the rules for "over-constrained" computations in <a href="http://www.w3.org/TR/CSS21/visudet.html#abs-non-replaced-width">section 10.3.7</a>
			are ignored in favor of alignment as specified here
			and the used value of the offset properties are not adjusted to correct for the over-constraint.


		<dt>Table Cells:
		<dd>
			This property does not apply to table cells,
			because their position and size is fully constrained by table layout.

		<dt>Flex Items:
		<dd>
			This property does not apply to <a>flex items</a>,
			because there is more than one item in the <a>main axis</a>.
			See 'flex' for stretching and 'justify-content' for <a>main-axis</a> alignment. [[!CSS3-FLEXBOX]]

		<dt>Grid Items:
		<dd>
			The 'justify-self' property applies along the grid's <a>row axis</a>.

			The <a>alignment container</a> is the <a>grid cell</a>.
			The <a>alignment subject</a> is the <a>grid item</a>’s margin box.
			The default <a>overflow alignment</a> is ''true''.
	</dl>

	<div class="example">
		The effect of these rules is that an auto-sized block-level table,
		for example, can be aligned while still having side margins.
		If the table's max-content size is narrower than its containing block,
		then it is shrink-wrapped to that size and aligned as specified.
		If the table's max-content size is wider, then it fills its containing block,
		and the margins provide appropriate spacing from the containing block edges.
	</div>

<h3 id='align-self-property'>
Block/Cross-Axis Alignment: the 'align-self' property</h3>

	<pre class="propdef">
	Name: align-self
	Value: auto | stretch | <<baseline-position>> | [ <<overflow-position>>? && <<self-position>> ]
	Initial: auto
	Applies to: flex items, grid items, and absolutely-positioned boxes
	Inherited: no
	Percentages: n/a
	Media: visual
	Computed value: specified value, except for ''align-self/auto'' (see prose)
	Animatable: no
	</pre>

	Aligns the box within its parent along the block/column/cross axis:
	the box's outer edges are aligned within its <a>alignment container</a>
	<a href="#alignment-values">as described by its alignment value</a>.

	The ''align-self/auto'' and ''align-self/stretch'' keywords are as defined in [[#justify-self-property]].

	All other values are as defined in [[#alignment-values]], above.

	<hr>

	<dl>
		<dt>Block-level Boxes:
		<dd>
			The 'align-self' property does not apply to block-level boxes
			(including floats),
			because there is more than one item in the <a>block axis</a>.

		<dt>Absolutely-positioned Boxes:
		<dd>
			The 'align-self' property applies along its containing block's <a>block axis</a>.

			When neither margin in this dimension is ''margin/auto''
			and neither offset property in this dimension is ''top/auto'',
			values other than ''align-self/stretch'' cause <a href="http://www.w3.org/TR/CSS21/visudet.html#abs-non-replaced-height">non-replaced absolutely-positioned boxes</a>
			to use shrink-to-fit sizing for calculating ''width/auto'' measures,
			and 'align-self' dictates alignment as follows:

			Issue: When you have non-auto left/right and auto width,
			legacy behavior stretches the width and ignores margins.
			We should keep "auto" around for abspos,
			and have it do this legacy behavior.
			Any other value (including "stretch") should do standard "auto margins get first dibs" behavior.

			The <a>alignment container</a> is the box's containing block
			as modified by the offset properties ('top'/'right'/'bottom'/'left').
			The <a>alignment subject</a> is the box's margin box.

			The default <a>overflow alignment</a> is ''safe''.
			In terms of CSS2.1 formatting [[!CSS21]],
			the rules for "over-constrained" computations in <a href="http://www.w3.org/TR/CSS21/visudet.html#abs-non-replaced-height">section 10.6.4</a>
			are ignored in favor of alignment as specified here
			and the used value of the offset properties are not adjusted to correct for the over-constraint.

			The ''align-self/auto'' keyword is equivalent to ''start'' on replaced absolutely-positioned boxes,
			and equivalent to ''align-self/stretch'' on all other absolutely-positioned boxes.
			(This is because CSS 2.1 does not stretch replaced elements to fit into fixed offsets.)

		<dt>Table Cells:
		<dd>
			This property does not apply to table cells,
			because their position and size is fully constrained by table layout.

		<dt>Flex Items:
		<dd>
			The 'align-self' property applies along the flexbox's <a>cross axis</a>.

			The <a>alignment container</a> is the <a>flex line</a> the item is in.
			The <a>alignment subject</a> is the <a>flex item</a>’s margin box.
			The default <a>overflow alignment</a> is ''true''.
			See [[!CSS3-FLEXBOX]] for details.

		<dt>Grid Items:
		<dd>
			The 'align-self' property applies along the grid's <a>column axis</a>.

			The <a>alignment container</a> is the <a>grid cell</a>.
			The <a>alignment subject</a> is the <a>grid item</a>’s margin box.
			The default <a>overflow alignment</a> is ''true''.
	</dl>

<h3 id="baseline-align-self">
Baseline Self-Alignment</h3>

	Boxes participating in row-like layout contexts (<a>shared alignment contexts</a>)
	can be baseline-aligned to each other.
	This effectively increases the margins on the box
	to align its <a>alignment baseline</a>
	with other baseline-aligned boxes in its <a lt="baseline-sharing group">group</a>.

	The set of boxes that participate in <dfn export lt="baseline self-alignment|first-baseline self-alignment|last-baseline self-alignment">baseline self-alignment</dfn>
	depends on the layout model:

	<dl>
		<dt>Flex Items:
		<dd>
			A <a>flex item</a> participates in first (last) <a>baseline self-alignment</a> in its flex line
			if its computed 'align-self' is ''baseline'' (''last-baseline'').
			See [[!CSS3-FLEXBOX]] for details.

		<dt>Grid Items:
		<dd>
			A <a>grid item</a> participates in first (last) <a>baseline content-alignment</a>
			in either its row or column (whichever matches its <a>inline axis</a>)
			if its 'justify-self' or 'align-self' property (whichever matches its <a>inline axis</a>)
			computes to ''baseline'' (''last-baseline'').
	</dl>

	If a box spans multiple <a>shared alignment contexts</a>,
	it participates in first (last) <a>baseline self-alignment</a>
	within its start-most (end-most) <a>shared alignment context</a> along that axis.

	When a box participates in first (last) <a>baseline self-alignment</a>
	its <a>alignment subject</a> is aligned to the start (end) edge of its <a>alignment container</a>
	and the minimum necessary extra space is added between its start (end) edge and the <a>alignment container</a>
	to match its <a>alignment baseline</a> in that axis up to that of its <a>baseline-sharing group</a>.
	See [[#align-by-baseline]].
	This may increase the intrinsic size contribution of the <a>alignment subject</a>.

<!--
                  ████ ████████ ████████ ██     ██  ██████
 ██   ██           ██     ██    ██       ███   ███ ██    ██
  ██ ██            ██     ██    ██       ████ ████ ██
█████████ ███████  ██     ██    ██████   ██ ███ ██  ██████
  ██ ██            ██     ██    ██       ██     ██       ██
 ██   ██           ██     ██    ██       ██     ██ ██    ██
                  ████    ██    ████████ ██     ██  ██████
-->

<h2 id='default-alignment'>
Default Alignment</h2>

	The 'align-items' and 'justify-items' properties set the default 'align-self' and 'justify-self' behavior of the items contained by the element.

	<div class="figure">
		<img alt="Diagram showing that the alignment of grid items within the element is affected." src="images/items-example.svg" width=212 height=212>
	</div>

<h3 id='justify-items-property'>
Inline/Main-Axis Alignment: the 'justify-items' property</h3>

	<pre class="propdef">
	Name: justify-items
	Value: auto | stretch | <<baseline-position>> | [ <<self-position>> && <<overflow-position>>? ] | [ legacy && [ ''<content-position>/left'' | ''<content-position>/right'' | ''<content-position>/center'' ] ]
	Initial: auto
	Applies to: block containers, flex containers, and grid containers
	Inherited: no
	Percentages: n/a
	Media: visual
	Computed value: specified value, except for ''justify-items/auto'' (see prose)
	Animatable: no
	</pre>

	This property specifies the default 'justify-self' for all of the boxes
	(including anonymous boxes)
	participating in this box's formatting context.
	Values have the following meanings:

	<dl dfn-type="value" dfn-for="justify-items">
		<dt><dfn>auto</dfn>
		<dd>
			If the <a>inherited value</a> of ''justify-items'' includes the ''legacy'' keyword,
			''justify-items/auto'' computes to the the <a>inherited value</a>.

			Otherwise, ''justify-items/auto'' computes to:

			<ul>
				<li>''justify-self/stretch'' for flex containers and grid containers
				<li>''start'' for everything else
			</ul>

		<dt><dfn>legacy</dfn>
		<dd>
			This keyword causes the value to effectively inherit into descendants.
			It can only be combined with the ''<content-position>/center'', ''left'', and ''right'' positions.
			When ''justify-self:auto'' retrieves the value of 'justify-items',
			only the alignment keyword, not the ''legacy'' keyword, is passed to it.
			It exists to implement the legacy alignment behavior of HTML's <code>&lt;center></code> element and <code>align</code> attribute.
	</dl>

	Other values have no special handling and are merely passed to 'justify-self'.

<h3 id='align-items-property'>
Block/Cross-Axis Alignment: the 'align-items' property</h3>

	<pre class="propdef">
	Name: align-items
	Value: auto | stretch | <<baseline-position>> | [ <<self-position>> && <<overflow-position>>? ]
	Initial: auto
	Applies to: block-level elements
	Inherited: no
	Percentages: n/a
	Media: visual
	Computed value: specified value, except for ''align-items/auto'' (see prose)
	Animatable: no
	</pre>

	This property specifies the default 'align-self' for all of the boxes
	(including anonymous boxes)
	participating in this box's formatting context.
	Values have the following meanings:

	<dl dfn-type="value" dfn-for="align-items">
		<dt><dfn>auto</dfn>
		<dd>
			Computes to:

			<ul>
				<li>''align-self/stretch'' for flex containers and grid containers
				<li>''start'' for everything else
			</ul>
	</dl>

	Other values have no special handling and are merely passed to 'align-self'.

<!--
████████     ███     ██████  ████████ ██       ████ ██    ██ ████████
██     ██   ██ ██   ██    ██ ██       ██        ██  ███   ██ ██
██     ██  ██   ██  ██       ██       ██        ██  ████  ██ ██
████████  ██     ██  ██████  ██████   ██        ██  ██ ██ ██ ██████
██     ██ █████████       ██ ██       ██        ██  ██  ████ ██
██     ██ ██     ██ ██    ██ ██       ██        ██  ██   ███ ██
████████  ██     ██  ██████  ████████ ████████ ████ ██    ██ ████████
-->

<h2 id='baseline-rules'>
Baseline Alignment Details</h2>

<h3 id='baseline-export'>
Determining the Baseline of a Box</h2>

	The <dfn export lt="first baselines|baselines of a box">first baselines</dfn> (and <dfn export>last baselines</dfn>) of a box
	for a given axis
	are a set of baselines (alphabetic, central, etc.)
	nominally associated with the first (last) line of text within the box.
	The <a>alignment baseline</a> is one of these,
	usually the dominant baseline of the <a>alignment container</a>.
	(See 'alignment-baseline'.)
	Note that boxes might not have baselines in a particular axis.

	The first and last <a>baselines of a box</a>
	are determined differently based on the layout model, as follows:

	<dl>
		<dt>block containers
		<dd>
			The first (last) inline-axis baselines of a block container
			are <a>generated</a> from the dominant first (last) baseline of the first (last) in-flow line box in the block container,
			or are taken from the first (last) in-flow block-level child in the block container that contributes a set of first (last) baselines,
			whichever comes first (last).
			If there is no such line box or child,
			then the block container has no baselines.
			For the purposes of finding the baselines,
			in-flow boxes with a scrolling mechanisms (see the 'overflow' property)
			must be considered as if scrolled to their origin (final) position.

			A block container has no block-axis baselines.

		<dt>tables
		<dd>
			The first (last) inline-axis baselines of a table box are
			the first (last) baselines of its first (last) row.

			When finding the baselines of an inline-block,
			any baselines contributed by table boxes must be skipped.
			(This quirk is a legacy behavior from [[CSS21]].)

			The first (last) block-axis baselines of a table box are the first (last) baselines of its first (last) column.

		<dt>table rows
		<dd>
			If any cells in the row participate in ''baseline'' (''last-baseline'') alignment along the row axis,
			the first (last) inline-axis baselines of the row
			are <a>generated</a> from their shared <a>alignment baseline</a>
			and the row's <a>first available font</a>,
			after alignment has been performed.
			Otherwise, the first (last) inline-axis baselines of the row
			are <a>synthesized</a> from the lowest and highest content edges of the cells in the row.
			[[!CSS21]]

			A table row has no block-axis baselines.

		<dt>table columns
		<dd>
			If any cells in the column participate in ''baseline'' (''last-baseline'') alignment
			along the column axis (by having a writing mode perpendicular to that of the table),
			the first (last) block-axis baselines of the column
			are <a>generated</a> from their shared <a>alignment baseline</a>
			and the column's <a>first available font</a>,
			after alignment has been performed.
			Otherwise, the the first (last) inline-axis baselines of the row
			are <a>synthesized</a> from the extreme content edges of the cells in the row.
			[[!CSS21]]

			A table column has no inline-axis baselines.

		<dt>flex containers
		<dd>
			See <a href="http://www.w3.org/TR/css3-flexbox/#flex-baselines">Flex Baselines</a> in [[!CSS3-FLEXBOX]].

		<dt>grid containers
		<dd>
			See <a href="http://www.w3.org/TR/css3-grid-layout/#grid-baselines">Grid Baselines</a> in [[!CSS3-GRID-LAYOUT]].
	</dl>

	To <dfn local-lt=generate|generated>generate baselines</dfn> for a box from a single baseline,
	use the baseline table from the font settings and <a>first available font</a> of that box,
	and align that baseline set to the given single baseline.

	To <dfn local-lt=synthesize|synthesized>synthesize baselines</dfn> from a rectangle (or two parallel lines),
	synthesize the alphabetic baseline from the lower line
	and the central baseline by averaging the positions of the upper and lower lines.

	Note: The forthcoming Inline Layout Module will define synthesis rules for baselines other than alphabetic and central.

	<p class='issue'>
		Maybe these things are wrong?
		CSS 2.1 is really weird about baseline alignment.

<h3 id='baseline-terms'>
Baseline Alignment Terminology</h3>

	A <dfn>baseline-sharing group</dfn>
	is composed of boxes that participate in baseline alignment together.
	This is possible only if they

	<ul>
		<li>share an <a>alignment context</a> whose axis is parallel to their <a>inline axis</a>
		<li>either have the same <a>block flow direction</a> and <a>baseline alignment preference</a>,
			or have opposite <a>block flow direction</a> and opposite <a>baseline alignment preference</a>
			(in other words, the baselines that want to align are on the same side of the alignment context).
	</ul>

	Boxes <dfn lt="shared alignment context|alignment context">share an alignment context</dfn> along a particular axis when they are:

	<ul>
		<li>table cells in the same row, along the table's row (inline) axis
		<li>table cells in the same column, along the table's column (block) axis
		<li>grid items in the same row, along the grid's row (inline) axis
		<li>grid items in the same column, along the grid's colum (block) axis
		<li>flex items in the same flex line, along the flex container's main axis
	</ul>

	Boxes in a <a>baseline-sharing group</a> are aligned to each other
	using their <dfn>alignment baseline</dfn>.
	This is the dominant baseline associated with
	the box that generates their <a>shared alignment context</a>
	on the first (last, for ''last-baseline'' alignment) <a lt="first formatted line">formatted line</a>.
	For example, in horizontal writing modes,
	specifying ''align-content: baseline'' on table cells in the same row
	will align the alphabetic baselines of their <a>first formatted lines</a>.

<h3 id='align-by-baseline'>
Aligning Boxes by Baseline</h3>

	Given a set of boxes and their baselines that all belong to a single <a>baseline-sharing group</a>,
	the boxes are baseline-aligned as follows:

	First, generate the alignment context's baseline table
	from its <a>first available font</a>
	and overlay also the mirror of this baseline table by aligning their central baselines.
	These are the baseline grids to which the boxes will align.

	Next, align all boxes by their specified <a>alignment baseline</a>
	to the alignment context's baseline table
	or its mirror, whichever matches its <a>line orientation</a>.
	Unless otherwise specified (e.g. via the 'alignment-baseline' property),
	the <a>alignment baseline</a> is the <a>dominant baseline</a> of the alignment context.

	Position this <dfn>aligned subtree</dfn> within the alignment container
	according to the rules of the <a>box alignment properties</a> in effect.

<!--
 ██████  ██     ██    ███    ██    ██  ██████   ████████  ██████
██    ██ ██     ██   ██ ██   ███   ██ ██    ██  ██       ██    ██
██       ██     ██  ██   ██  ████  ██ ██        ██       ██
██       █████████ ██     ██ ██ ██ ██ ██   ████ ██████    ██████
██       ██     ██ █████████ ██  ████ ██    ██  ██             ██
██    ██ ██     ██ ██     ██ ██   ███ ██    ██  ██       ██    ██
 ██████  ██     ██ ██     ██ ██    ██  ██████   ████████  ██████
-->

<h2 id="changes">
Changes</h2>

	Changes since the <a href="http://www.w3.org/TR/2014/WD-css-align-3-20141218/">previous Working Draft</a> include:

	* Fixed handling of ''justify-self: stretch'' (and 'align-self') to allow shrinking, as defined in Flexbox.
	* Made justify/align-content:auto computte to their respective behaviors for flex and grid containers.

<h2 class=no-num id="acknowledgments">
Acknowledgments</h2>

	Special thanks goes to Markus Mielke, Alex Mogilevsky, and the
	participants in the CSSWG's March 2008 F2F alignment discussions.
