<h1>CSS Transitions Level 2</h1>

<pre class='metadata'>
Status: ED
Work Status: Exploring
Shortname: css-transitions-2
Level: 2
Group: csswg
ED: http://dev.w3.org/csswg/css-transitions-2/
Editor: L. David Baron, Mozilla, dbaron@dbaron.org
Issue Tracking: Bugzilla bugs for all levels https://www.w3.org/Bugs/Public/buglist.cgi?query_format=advanced&amp;product=CSS&amp;component=Transitions&amp;resolution=---
Abstract: CSS Transitions allows property changes in CSS values to occur smoothly over a specified duration.
Ignored Terms: translate, rotate, scale
</pre>
<pre class=anchors>
urlPrefix: http://w3c.github.io/web-animations/; type: interface; spec: web-animations
    text: Animation
urlPrefix: http://w3c.github.io/web-animations/; type: dfn; spec: web-animations
    text: animation sequence number
    text: animation type
</pre>
<pre class=link-defaults>
spec:css-transitions-1; type:value; text:all
</pre>

<h2 id="delta">Delta specification</h2>

	<p>This is a delta specification, meaning that it currently contains
	only the differences from CSS Transitions Level 1 [[!CSS3-TRANSITIONS]].
	Once the Level 1 specification is closer to complete, it will be merged
	with the additions here into a complete level 2 specification.</p>

<h2 id="transition-events"><span id="transition-events-">Transition Events</span></h2>

<h3 id="transition-event-types">Types of <code>TransitionEvent</code></h3>

	<p>The <em>additional</em> types of transition events that can occur are:</p>

	<dl dfn-type=event dfn-for=transitionevent>
		<dt><dfn>transitionstart</dfn>
		<dd>
			The <a idl>transitionstart</a> event occurs when a transition is started (i.e., when it is added to the set of <a>running transitions</a>).
			<ul>
				<li>Bubbles: Yes</li>
				<li>Cancelable: No</li>
				<li>Context Info: propertyName, elapsedTime, pseudoElement</li>
			</ul>
		<dt><dfn>transitioncancel</dfn>
		<dd>
			The <a idl>transitioncancel</a> event occurs when a transition is <a data-lt="cancel">cancelled</a>.
			<ul>
				<li>Bubbles: Yes</li>
				<li>Cancelable: No</li>
				<li>Context Info: propertyName, elapsedTime, pseudoElement</li>
			</ul>
	</dl>

# Starting of transitions # {#starting}

Associated with each top-level browsing context is a <dfn>current transition
generation</dfn> that is incremented on each <a>style change event</a>.

Each time a new transition is generated, the current value of the (already
incremented) <a>current transition generation</a> is stored as the
transition's <dfn>transition generation</dfn>.

# Web Animations Instantiation of CSS Animations # {#web-animations-instantiation-of-CSS-animations}

TBD. Not sure if we really want a separate 'web animations' section or if we
should do a better job of integrating the two.

## The transition property name ## {#transition-property-name}

Although the 'transition-property' may specify shorthand properties and the
''all'' keyword, individual transitions are generated for each longhand
sub-property that is animatable. The <dfn>expanded transition property
name</dfn> of a transition is the name of the longhand sub-property for which
the transition was generated (e.g. 'border-left-width').

## Animation priority ## {#animation-priority}

The <a spec='web-animations'>animations</a> generated from the markup and
interfaces (e.g. the {{CSSTransition}} constructor) defined in this
specification have an <a>animation type</a> of &lsquo;CSS Transition&rsquo;.

CSS Transitions have a <em>lower</em> priority that CSS Animations and
animations without a specific <a>animation type</a>.

Within the set of CSS Transitions, two animations <var>A</var> and <var>B</var>
are sorted in priority order (lowest to highest) as follows:

1.  Define the <dfn>owning element</dfn> as the element or pseudo-element to
    which the 'transition-property' property was applied that generated this
    CSS Transition.
    If the CSS Transition was generated directly by script (e.g. using
    the {{CSSTransition}} constructor) then it has no <a>owning element</a>.

1.  If neither <var>A</var> nor <var>B</var> has an <a>owning element</a>,
    sort based on <var>A</var> and <var>B</var> such that their <a
    spec='web-animations'>animation sequence numbers</a> are in ascending order.

1.  Otherwise, if  only one of <var>A</var> or <var>B</var> has an <a>owning
    element</a>, let the animation <em>with</em> an <a>owning element</a> sort
    first.

1.  Otherwise, if the <a>owning element</a> of <var>A</var> and <var>B</var>
    differs, sort <var>A</var> and <var>B</var> by <a>tree order</a>
    of their corresponding <a>owning elements</a>.
    With regard to pseudo-elements, the sort order is as follows:

    *  element
    *  ::before
    *  ::after
    *  element children

1.  Otherwise, if <var>A</var> and <var>B</var> have different <a>transition
    generation</a> values, sort by their corresponding
    <a>transition generation</a> in ascending order.

1.  Otherwise, sort <var>A</var> and <var>B</var> in ascending order by the
    Unicode codepoints that make up the <a>expanded transition property
    name</a> of each transition (i.e. without attempting case conversion and
    such that &lsquo;-moz-column-width&rsquo; sorts before
    &lsquo;column-width&rsquo;).

# DOM Interfaces # {#DOM-interfaces}

## The CSSTransition interface ## {#the-CSSTransition-interface}

<pre class="idl">
interface CSSTransition : Animation {
  readonly attribute DOMString transitionProperty;
};
</pre>

:   <dfn attribute for=CSSTransition>transitionProperty</dfn>
::  The <a>expanded transition property name</a> of this transition.

TBD: Define a constructor for this

# Issues deferred from previous levels # {#deferred-issues}

	<div class="issue">
		We may ultimately want to support a keypath syntax
		for the 'transition-property' property.
		A keypath syntax
		would enable different transitions
		to be specified
		for components of a property.
		For example
		the blur of a shadow
		could have
		a different transition
		than the color of a shadow.
	</div>
